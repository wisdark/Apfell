{
  "profiles": [
    {
      "name": "default",
      "description": "Default RESTful C2 channel",
      "author": "@its_a_feature_",
      "is_p2p": false,
      "is_server_routed": false,
      "params": [
        {
          "name": "Callback host",
          "key": "callback_host",
          "hint": "http(s):\/\/domain.com",
          "randomize": false,
          "format_string": ""
        },
        {
          "name": "Callback port",
          "key": "callback_port",
          "hint": "80",
          "randomize": false,
          "format_string": ""
        },
        {
          "name": "Callback interval (in seconds)",
          "key": "callback_interval",
          "hint": "10",
          "randomize": false,
          "format_string": ""
        },
        {
          "name": "Callback jitter (in percent)",
          "key": "callback_jitter",
          "hint": "23",
          "randomize": false,
          "format_string": ""
        },
        {
          "name": "Host header (for domain fronting)",
          "key": "domain_front",
          "hint": "",
          "randomize": false,
          "format_string": ""
        },
        {
          "name": "Encrypted Key Exchange (T/F)",
          "key": "encrypted_exchange_check",
          "hint": "T",
          "randomize": false,
          "format_string": ""
        },
        {
          "name": "Base64 32byte AES Key",
          "key": "AESPSK",
          "hint": "",
          "randomize": false,
          "format_string": ""
        },
        {
          "name": "Kill Date",
          "key": "killdate",
          "hint": "yyyy-mm-dd",
          "randomize": false,
          "format_string": ""
        },
        {
          "name": "User Agent",
          "key": "USER_AGENT",
          "hint": "Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko",
          "randomize": false,
          "format_string": ""
        }
      ],
      "payload_types": [
        {
          "name": "apfell-jxa",
          "files": []
        },
        {
          "name": "poseidon",
          "files": []
        },
        {
          "name": "atlas",
          "files": []
        }
      ],
      "notes": "The 'apfell-jxa' agent cannot connect to self-signed certs, so keep that in mind when standing up infrastructure. \nThis container can be configured and started if you don't want to connect directly to the Apfell server. Otherwise, this container simply acts as a slightly smarter socat redirector.\nWhen starting this container, make sure the \"Config.json\"'s apfellBase parameter matches the protocol (HTTP vs HTTPS) and port for the main Apfell instance.",
      "sampleServer": "",
      "sampleClient": "When setting parameters:\ncallback_host should be 'http://domain.com', 'https://domain.com'.\n'Base64 32byte AES Key' is auto-generated per operation and automatically filled in if the key name is 'AESPSK'. This value must be set for static pre-shared key comms or encrypted key  exchange comms. You can change it to be any base64 of 32 bytes.\nBy default, the payloads will do an encrypted key exchange of some sort"
    },
    {
      "description": "Manipulate HTTP(S) requests and responses",
      "external": false,
      "author": "@its_a_feature_",
      "is_p2p": false,
      "is_server_routed": false,
      "sampleServer": "{\n  \"instances\": [\n  {\n    \"GET\": {\n    \"ServerBody\": [\n      {\n        \"function\": \"base64\",\n        \"parameters\": []\n      },\n      {\n        \"function\": \"prepend\",\n        \"parameters\": [\"!function(e,t){\\\"use strict\\\";\\\"object\\\"==typeof module&&\\\"object\\\"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error(\\\"jQuery requires a window with a document\\\");return t(e)}:t(e)}(\\\"undefined\\\"!=typeof window?window:this,function(e,t){\\\"use strict\\\";var n=[],r=e.document,i=Object.getPrototypeOf,o=n.slice,a=n.concat,s=n.push,u=n.indexOf,l={},c=l.toString,f=l.hasOwnProperty,p=f.toString,d=p.call(Object),h={},g=function e(t){return\\\"function\\\"==typeof t&&\\\"number\\\"!=typeof t.nodeType},y=function e(t){return null!=t&&t===t.window},v={type:!0,src:!0,noModule:!0};function m(e,t,n){var i,o=(t=t||r).createElement(\\\"script\\\");if(o.text=e,n)for(i in v)n[i]&&(o[i]=n[i]);t.head.appendChild(o).parentNode.removeChild(o)}function x(e){return null==e?e+\\\"\\\":\\\"object\\\"==typeof e||\\\"function\\\"==typeof e?l[c.call(e)]||\\\"object\\\":typeof e}var b=\\\"3.3.1\\\",w=function(e,t){return new w.fn.init(e,t)},T=\/^[\\\\s\\\\uFEFF\\\\xA0]+|[\\\\s\\\\uFEFF\\\\xA0]+$\/g;w.fn=w.prototype={jquery:\\\"3.3.1\\\",constructor:w,length:0,toArray:function(){return o.call(this)},get:function(e){return null==e?o.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=w.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return w.each(this,e)},map:function(e){return this.pushStack(w.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(o.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:s,sort:n.sort,splice:n.splice},w.extend=w.fn.extend=function(){var e,t,n,r,i,o,a=arguments[0]||{},s=1,u=arguments.length,l=!1;for(\\\"boolean\\\"==typeof a&&(l=a,a=arguments[s]||{},s++),\\\"object\\\"==typeof a||g(a)||(a={}),s===u&&(a=this,s--);s<u;s++)if(null!=(e=arguments[s]))for(t in e)n=a[t],a!==(r=e[t])&&(l&&r&&(w.isPlainObject(r)||(i=Array.isArray(r)))?(i?(i=!1,o=n&&Array.isArray(n)?n:[]):o=n&&w.isPlainObject(n)?n:{},a[t]=w.extend(l,o,r)):void 0!==r&&(a[t]=r));return a},w.extend({expando:\\\"jQuery\\\"+(\\\"3.3.1\\\"+Math.random()).replace(\/\\\\D\/g,\\\"\\\"),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||\\\"[object Object]\\\"!==c.call(e))&&(!(t=i(e))||\\\"function\\\"==typeof(n=f.call(t,\\\"constructor\\\")&&t.constructor)&&p.call(n)===d)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e){m(e)},each:function(e,t){var n,r=0;if(C(e)){for(n=e.length;r<n;r++)if(!1===t.call(e[r],r,e[r]))break}else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},trim:function(e){return null==e?\\\"\\\":(e+\\\"\\\").replace(T,\\\"\\\")},makeArray:function(e,t){var n=t||[];return null!=e&&(C(Object(e))?w.merge(n,\\\"string\\\"==typeof e?[e]:e):s.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:u.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r,i=[],o=0,a=e.length,s=!n;o<a;o++)(r=!t(e[o],o))!==s&&i.push(e[o]);return i},map:function(e,t,n){var r,i,o=0,s=[];if(C(e))for(r=e.length;o<r;o++)null!=(i=t(e[o],o,n))&&s.push(i);else for(o in e)null!=(i=t(e[o],o,n))&&s.push(i);return a.apply([],s)},guid:1,support:h}),\\\"function\\\"==typeof Symbol&&(w.fn[Symbol.iterator]=n[Symbol.iterator]),w.each(\\\"Boolean Number String Function Array Date RegExp Object Error Symbol\\\".split(\\\" \\\"),function(e,t){l[\\\"[object \\\"+t+\\\"]\\\"]=t.toLowerCase()});function C(e){var t=!!e&&\\\"length\\\"in e&&e.length,n=x(e);return!g(e)&&!y(e)&&(\\\"array\\\"===n||0===t||\\\"number\\\"==typeof t&&t>0&&t-1 in e)}var E=function(e){var t,n,r,i,o,a,s,u,l,c,f,p,d,h,g,y,v,m,x,b=\\\"sizzle\\\"+1*new Date,w=e.document,T=0,C=0,E=ae(),k=ae(),S=ae(),D=function(e,t){return e===t&&(f=!0),0},N={}.hasOwnProperty,A=[],j=A.pop,q=A.push,L=A.push,H=A.slice,O=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},P=\\\"\\r\"]\n      },\n      {\n        \"function\": \"prepend\",\n        \"parameters\": [\"\/*! jQuery v3.3.1 | (c) JS Foundation and other contributors | jquery.org\/license *\/\"]\n      },\n      {\n        \"function\": \"append\",\n        \"parameters\": [\"\\\".(o=t.documentElement,Math.max(t.body[\\\"scroll\\\"+e],o[\\\"scroll\\\"+e],t.body[\\\"offset\\\"+e],o[\\\"offset\\\"+e],o[\\\"client\\\"+e])):void 0===i?w.css(t,n,s):w.style(t,n,i,s)},t,a?i:void 0,a)}})}),w.each(\\\"blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu\\\".split(\\\" \\\"),function(e,t){w.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),w.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),w.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,\\\"**\\\"):this.off(t,e||\\\"**\\\",n)}}),w.proxy=function(e,t){var n,r,i;if(\\\"string\\\"==typeof t&&(n=e[t],t=e,e=n),g(e))return r=o.call(arguments,2),i=function(){return e.apply(t||this,r.concat(o.call(arguments)))},i.guid=e.guid=e.guid||w.guid++,i},w.holdReady=function(e){e?w.readyWait++:w.ready(!0)},w.isArray=Array.isArray,w.parseJSON=JSON.parse,w.nodeName=N,w.isFunction=g,w.isWindow=y,w.camelCase=G,w.type=x,w.now=Date.now,w.isNumeric=function(e){var t=w.type(e);return(\\\"number\\\"===t||\\\"string\\\"===t)&&!isNaN(e-parseFloat(e))},\\\"function\\\"==typeof define&&define.amd&&define(\\\"jquery\\\",[],function(){return w});var Jt=e.jQuery,Kt=e.$;return w.noConflict=function(t){return e.$===w&&(e.$=Kt),t&&e.jQuery===w&&(e.jQuery=Jt),w},t||(e.jQuery=e.$=w),w});\"]\n      }\n    ],\n    \"ServerHeaders\": {\n        \"Server\": \"NetDNA-cache\/2.2\",\n        \"Cache-Control\": \"max-age=0, no-cache\",\n        \"Pragma\": \"no-cache\",\n        \"Connection\": \"keep-alive\",\n        \"Content-Type\": \"application\/javascript; charset=utf-8\"\n      },\n    \"ServerCookies\": {},\n    \"AgentMessage\": [{\n      \"urls\": [\"http:\/\/192.168.205.151:9001\"],\n      \"uri\": \"\/<test:string>\",\n      \"urlFunctions\": [\n        {\n          \"name\": \"<test:string>\",\n          \"value\": \"\",\n          \"transforms\": [\n            {\n              \"function\": \"choose_random\",\n              \"parameters\": [\"jquery-3.3.1.min.js\",\"jquery-3.3.1.map\"]\n            }\n          ]\n        }\n      ],\n      \"AgentHeaders\": {\n        \"Accept\": \"text\/html,application\/xhtml+xml,application\/xml;q=0.9,*\/*;q=0.8\",\n        \"Host\": \"code.jquery.com\",\n        \"Referer\": \"http:\/\/code.jquery.com\/\",\n        \"Accept-Encoding\": \"gzip, deflate\",\n        \"User-Agent\": \"Mozilla\/5.0 (Windows NT 6.3; Trident\/7.0; rv:11.0) like Gecko\"\n      },\n      \"QueryParameters\": [\n          {\n            \"name\": \"q\",\n            \"value\": \"message\",\n            \"transforms\": [\n            ]\n          }\n      ],\n      \"Cookies\": [\n         {\n          \"name\": \"__cfduid\",\n          \"value\": \"\",\n          \"transforms\": [\n            {\n              \"function\": \"random_alpha\",\n              \"parameters\": [30]\n            },\n            {\n              \"function\": \"base64\",\n              \"parameters\": []\n            }\n          ]\n        }\n      ],\n      \"Body\": []\n    }]\n  },\n    \"POST\": {\n    \"ServerBody\": [],\n    \"ServerCookies\": {},\n    \"ServerHeaders\": {\n          \"Server\": \"NetDNA-cache\/2.2\",\n          \"Cache-Control\": \"max-age=0, no-cache\",\n          \"Pragma\": \"no-cache\",\n          \"Connection\": \"keep-alive\",\n          \"Content-Type\": \"application\/javascript; charset=utf-8\"\n        },\n    \"AgentMessage\": [{\n      \"urls\": [\"http:\/\/192.168.205.151:9001\"],\n      \"uri\": \"\/download.php\",\n      \"urlFunctions\": [],\n      \"QueryParameters\": [\n        {\n          \"name\": \"bob2\",\n          \"value\": \"justforvalidation\",\n          \"transforms\": []\n        }\n      ],\n      \"AgentHeaders\": {\n        \"Accept\": \"text\/html,application\/xhtml+xml,application\/xml;q=0.9,*\/*;q=0.8\",\n        \"Host\": \"code.jquery.com\",\n        \"Referer\": \"http:\/\/code.jquery.com\/\",\n        \"Accept-Encoding\": \"gzip, deflate\",\n        \"User-Agent\": \"Mozilla\/5.0 (Windows NT 6.3; Trident\/7.0; rv:11.0) like Gecko\"\n      },\n      \"Cookies\": [\n        {\n          \"name\": \"BobCookie\",\n          \"value\": \"splat\",\n          \"transforms\": [\n            {\n              \"function\": \"prepend\",\n              \"parameters\": [\n                \"splatity_\"\n              ]\n            }\n          ]\n        }\n      ],\n      \"Body\": [\n        {\n          \"function\": \"base64\",\n          \"parameters\": []\n        },\n        {\n          \"function\": \"prepend\",\n          \"parameters\": [\"<html>\"]\n        },\n          {\n          \"function\": \"append\",\n          \"parameters\": [\"<\/html>\"]\n        }\n      ]\n    }]\n  },\n    \"no_match\": {\n      \"action\": \"return_file\",\n      \"redirect\": \"http:\/\/example.com\",\n      \"proxy_get\": {\n        \"url\": \"https:\/\/www.google.com\",\n        \"status\": 200\n      },\n      \"proxy_post\": {\n        \"url\": \"https:\/\/www.example.com\",\n        \"status\": 200\n      },\n      \"return_file\": {\n        \"name\": \"fake.html\",\n        \"status\": 404\n      }\n    },\n    \"port\": 9001,\n    \"key_path\": \"\",\n    \"cert_path\": \"\",\n    \"debug\": true\n    }\n  ],\n  \"apfellBase\": \"http:\/\/localhost\/api\/v1.4\/agent_message\"\n}\n",
      "sampleClient": "{\n  \"GET\": {\n    \"ServerBody\": [\n      {\n        \"function\": \"base64\",\n        \"parameters\": []\n      },\n      {\n        \"function\": \"prepend\",\n        \"parameters\": [\"!function(e,t){\\\"use strict\\\";\\\"object\\\"==typeof module&&\\\"object\\\"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error(\\\"jQuery requires a window with a document\\\");return t(e)}:t(e)}(\\\"undefined\\\"!=typeof window?window:this,function(e,t){\\\"use strict\\\";var n=[],r=e.document,i=Object.getPrototypeOf,o=n.slice,a=n.concat,s=n.push,u=n.indexOf,l={},c=l.toString,f=l.hasOwnProperty,p=f.toString,d=p.call(Object),h={},g=function e(t){return\\\"function\\\"==typeof t&&\\\"number\\\"!=typeof t.nodeType},y=function e(t){return null!=t&&t===t.window},v={type:!0,src:!0,noModule:!0};function m(e,t,n){var i,o=(t=t||r).createElement(\\\"script\\\");if(o.text=e,n)for(i in v)n[i]&&(o[i]=n[i]);t.head.appendChild(o).parentNode.removeChild(o)}function x(e){return null==e?e+\\\"\\\":\\\"object\\\"==typeof e||\\\"function\\\"==typeof e?l[c.call(e)]||\\\"object\\\":typeof e}var b=\\\"3.3.1\\\",w=function(e,t){return new w.fn.init(e,t)},T=\/^[\\\\s\\\\uFEFF\\\\xA0]+|[\\\\s\\\\uFEFF\\\\xA0]+$\/g;w.fn=w.prototype={jquery:\\\"3.3.1\\\",constructor:w,length:0,toArray:function(){return o.call(this)},get:function(e){return null==e?o.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=w.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return w.each(this,e)},map:function(e){return this.pushStack(w.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(o.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:s,sort:n.sort,splice:n.splice},w.extend=w.fn.extend=function(){var e,t,n,r,i,o,a=arguments[0]||{},s=1,u=arguments.length,l=!1;for(\\\"boolean\\\"==typeof a&&(l=a,a=arguments[s]||{},s++),\\\"object\\\"==typeof a||g(a)||(a={}),s===u&&(a=this,s--);s<u;s++)if(null!=(e=arguments[s]))for(t in e)n=a[t],a!==(r=e[t])&&(l&&r&&(w.isPlainObject(r)||(i=Array.isArray(r)))?(i?(i=!1,o=n&&Array.isArray(n)?n:[]):o=n&&w.isPlainObject(n)?n:{},a[t]=w.extend(l,o,r)):void 0!==r&&(a[t]=r));return a},w.extend({expando:\\\"jQuery\\\"+(\\\"3.3.1\\\"+Math.random()).replace(\/\\\\D\/g,\\\"\\\"),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||\\\"[object Object]\\\"!==c.call(e))&&(!(t=i(e))||\\\"function\\\"==typeof(n=f.call(t,\\\"constructor\\\")&&t.constructor)&&p.call(n)===d)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e){m(e)},each:function(e,t){var n,r=0;if(C(e)){for(n=e.length;r<n;r++)if(!1===t.call(e[r],r,e[r]))break}else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},trim:function(e){return null==e?\\\"\\\":(e+\\\"\\\").replace(T,\\\"\\\")},makeArray:function(e,t){var n=t||[];return null!=e&&(C(Object(e))?w.merge(n,\\\"string\\\"==typeof e?[e]:e):s.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:u.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r,i=[],o=0,a=e.length,s=!n;o<a;o++)(r=!t(e[o],o))!==s&&i.push(e[o]);return i},map:function(e,t,n){var r,i,o=0,s=[];if(C(e))for(r=e.length;o<r;o++)null!=(i=t(e[o],o,n))&&s.push(i);else for(o in e)null!=(i=t(e[o],o,n))&&s.push(i);return a.apply([],s)},guid:1,support:h}),\\\"function\\\"==typeof Symbol&&(w.fn[Symbol.iterator]=n[Symbol.iterator]),w.each(\\\"Boolean Number String Function Array Date RegExp Object Error Symbol\\\".split(\\\" \\\"),function(e,t){l[\\\"[object \\\"+t+\\\"]\\\"]=t.toLowerCase()});function C(e){var t=!!e&&\\\"length\\\"in e&&e.length,n=x(e);return!g(e)&&!y(e)&&(\\\"array\\\"===n||0===t||\\\"number\\\"==typeof t&&t>0&&t-1 in e)}var E=function(e){var t,n,r,i,o,a,s,u,l,c,f,p,d,h,g,y,v,m,x,b=\\\"sizzle\\\"+1*new Date,w=e.document,T=0,C=0,E=ae(),k=ae(),S=ae(),D=function(e,t){return e===t&&(f=!0),0},N={}.hasOwnProperty,A=[],j=A.pop,q=A.push,L=A.push,H=A.slice,O=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},P=\\\"\\r\"]\n      },\n      {\n        \"function\": \"prepend\",\n        \"parameters\": [\"\/*! jQuery v3.3.1 | (c) JS Foundation and other contributors | jquery.org\/license *\/\"]\n      },\n      {\n        \"function\": \"append\",\n        \"parameters\": [\"\\\".(o=t.documentElement,Math.max(t.body[\\\"scroll\\\"+e],o[\\\"scroll\\\"+e],t.body[\\\"offset\\\"+e],o[\\\"offset\\\"+e],o[\\\"client\\\"+e])):void 0===i?w.css(t,n,s):w.style(t,n,i,s)},t,a?i:void 0,a)}})}),w.each(\\\"blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu\\\".split(\\\" \\\"),function(e,t){w.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),w.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),w.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,\\\"**\\\"):this.off(t,e||\\\"**\\\",n)}}),w.proxy=function(e,t){var n,r,i;if(\\\"string\\\"==typeof t&&(n=e[t],t=e,e=n),g(e))return r=o.call(arguments,2),i=function(){return e.apply(t||this,r.concat(o.call(arguments)))},i.guid=e.guid=e.guid||w.guid++,i},w.holdReady=function(e){e?w.readyWait++:w.ready(!0)},w.isArray=Array.isArray,w.parseJSON=JSON.parse,w.nodeName=N,w.isFunction=g,w.isWindow=y,w.camelCase=G,w.type=x,w.now=Date.now,w.isNumeric=function(e){var t=w.type(e);return(\\\"number\\\"===t||\\\"string\\\"===t)&&!isNaN(e-parseFloat(e))},\\\"function\\\"==typeof define&&define.amd&&define(\\\"jquery\\\",[],function(){return w});var Jt=e.jQuery,Kt=e.$;return w.noConflict=function(t){return e.$===w&&(e.$=Kt),t&&e.jQuery===w&&(e.jQuery=Jt),w},t||(e.jQuery=e.$=w),w});\"]\n      }\n    ],\n    \"ServerHeaders\": {\n        \"Server\": \"NetDNA-cache\/2.2\",\n        \"Cache-Control\": \"max-age=0, no-cache\",\n        \"Pragma\": \"no-cache\",\n        \"Connection\": \"keep-alive\",\n        \"Content-Type\": \"application\/javascript; charset=utf-8\"\n      },\n    \"ServerCookies\": {},\n    \"AgentMessage\": [{\n      \"urls\": [\"http:\/\/192.168.205.151:9001\"],\n      \"uri\": \"\/<test:string>\",\n      \"urlFunctions\": [\n        {\n          \"name\": \"<test:string>\",\n          \"value\": \"\",\n          \"transforms\": [\n            {\n              \"function\": \"choose_random\",\n              \"parameters\": [\"jquery-3.3.1.min.js\",\"jquery-3.3.1.map\"]\n            }\n          ]\n        }\n      ],\n      \"AgentHeaders\": {\n        \"Accept\": \"text\/html,application\/xhtml+xml,application\/xml;q=0.9,*\/*;q=0.8\",\n        \"Host\": \"code.jquery.com\",\n        \"Referer\": \"http:\/\/code.jquery.com\/\",\n        \"Accept-Encoding\": \"gzip, deflate\",\n        \"User-Agent\": \"Mozilla\/5.0 (Windows NT 6.3; Trident\/7.0; rv:11.0) like Gecko\"\n      },\n      \"QueryParameters\": [\n          {\n            \"name\": \"q\",\n            \"value\": \"message\",\n            \"transforms\": [\n            ]\n          }\n      ],\n      \"Cookies\": [\n         {\n          \"name\": \"__cfduid\",\n          \"value\": \"\",\n          \"transforms\": [\n            {\n              \"function\": \"random_alpha\",\n              \"parameters\": [30]\n            },\n            {\n              \"function\": \"base64\",\n              \"parameters\": []\n            }\n          ]\n        }\n      ],\n      \"Body\": []\n    }]\n  },\n  \"POST\": {\n    \"ServerBody\": [],\n    \"ServerCookies\": {},\n    \"ServerHeaders\": {\n          \"Server\": \"NetDNA-cache\/2.2\",\n          \"Cache-Control\": \"max-age=0, no-cache\",\n          \"Pragma\": \"no-cache\",\n          \"Connection\": \"keep-alive\",\n          \"Content-Type\": \"application\/javascript; charset=utf-8\"\n        },\n    \"AgentMessage\": [{\n      \"urls\": [\"http:\/\/192.168.205.151:9001\"],\n      \"uri\": \"\/download.php\",\n      \"urlFunctions\": [],\n      \"QueryParameters\": [\n        {\n          \"name\": \"bob2\",\n          \"value\": \"justforvalidation\",\n          \"transforms\": []\n        }\n      ],\n      \"AgentHeaders\": {\n        \"Accept\": \"text\/html,application\/xhtml+xml,application\/xml;q=0.9,*\/*;q=0.8\",\n        \"Host\": \"code.jquery.com\",\n        \"Referer\": \"http:\/\/code.jquery.com\/\",\n        \"Accept-Encoding\": \"gzip, deflate\",\n        \"User-Agent\": \"Mozilla\/5.0 (Windows NT 6.3; Trident\/7.0; rv:11.0) like Gecko\"\n      },\n      \"Cookies\": [\n        {\n          \"name\": \"BobCookie\",\n          \"value\": \"splat\",\n          \"transforms\": [\n            {\n              \"function\": \"prepend\",\n              \"parameters\": [\n                \"splatity_\"\n              ]\n            }\n          ]\n        }\n      ],\n      \"Body\": [\n        {\n          \"function\": \"base64\",\n          \"parameters\": []\n        },\n        {\n          \"function\": \"prepend\",\n          \"parameters\": [\"<html>\"]\n        },\n          {\n          \"function\": \"append\",\n          \"parameters\": [\"<\/html>\"]\n        }\n      ]\n    }]\n  },\n  \"jitter\": 50,\n  \"interval\": 10,\n  \"chunk_size\": 5120000,\n  \"key_exchange\": true,\n  \"kill_date\": \"\"\n}\n",
      "notes": "The 'Config.json' file is what configures the 'server' file within the docker container. Be sure to update this to match the port your Apfell server is listening on as well as updating it to match any updates you supply in your agent. You can see a sample agent configuration in `agent_config.json`.",
      "name": "HTTP",
      "icon": null,
      "params": [
        {
          "name": "Base64 32byte AES Key",
          "key": "AESPSK",
          "hint": "",
          "randomize": false,
          "format_string": ""
        },
        {
          "name": "Agent JSON Config",
          "key": "raw_c2_config",
          "hint": "",
          "randomize": false,
          "format_string": ""
        }
      ],
      "payload_types": [
        {
          "name": "apfell-jxa",
          "files": [
            {
              "HTTP.js": ""
            }
          ]
        }
      ]
    },
    {
      "description": "Websocket C2 Server for poseidon",
      "running": false,
      "container_running": true,
      "external": false,
      "author": "@xorrior",
      "is_p2p": false,
      "is_server_routed": false,
      "sampleServer": "",
      "sampleClient": "",
      "notes": "The 'Config.json' file is what configures the 'server' file within the docker container. Be sure to update this to match the port your server is listening on as well as updating it to match the configuration of your agent. \n\n- usessl -> Listen on the specified port and enable SSL. If \"key.pem\" and \"cert.pem\" don't exist, the server will generate a self-signed certificate and key file.\n- sslkey -> path to the ssl private key\n- sslcert -> path to the ssl certificate\n- websocketuri -> Websocket endpoint used for client connections (e.g. wss:\/\/myserver\/websocketuri)\n- pollinterval -> This is not used for the websockets profile",
      "deleted": false,
      "creation_time": "03\/06\/2020 15:22:03",
      "last_heartbeat": "03\/06\/2020 15:32:35",
      "name": "websocket",
      "icon": null,
      "params": [
        {
          "name": "Callback host",
          "key": "callback_host",
          "hint": "ws:\/\/127.0.0.1",
          "randomize": false,
          "format_string": ""
        },
        {
          "name": "Host header (for domain fronting)",
          "key": "domain_front",
          "hint": "",
          "randomize": false,
          "format_string": ""
        },
        {
          "name": "Base64 32byte AES Key",
          "key": "AESPSK",
          "hint": "",
          "randomize": false,
          "format_string": ""
        },
        {
          "name": "Callback interval (in seconds)",
          "key": "callback_interval",
          "hint": "10",
          "randomize": false,
          "format_string": ""
        },
        {
          "name": "Callback port",
          "key": "callback_port",
          "hint": "8080",
          "randomize": false,
          "format_string": ""
        },
        {
          "name": "Callback jitter (in percent)",
          "key": "callback_jitter",
          "hint": "37",
          "randomize": false,
          "format_string": ""
        },
        {
          "name": "Websockets Endpoint",
          "key": "ENDPOINT_REPLACE",
          "hint": "socket",
          "randomize": false,
          "format_string": ""
        },
        {
          "name": "Encrypted Key Exchange (T\/F)",
          "key": "encrypted_exchange_check",
          "hint": "T",
          "randomize": false,
          "format_string": ""
        },
        {
          "name": "User Agent",
          "key": "USER_AGENT",
          "hint": "Mozilla\/5.0 (Windows NT 6.3; Trident\/7.0; rv:11.0) like Gecko",
          "randomize": false,
          "format_string": ""
        }
      ],
      "payload_types": [
        {
          "name": "poseidon",
          "files": [
            {
              "websocket.go": ""
            }
          ]
        }
      ]
    },
    {
      "description": "Chrome Extension C2 server",
      "running": true,
      "container_running": true,
      "external": false,
      "author": "@xorrior",
      "is_p2p": false,
      "is_server_routed": false,
      "sampleServer": "",
      "sampleClient": "",
      "notes": "The c2config.json file is what configures the 'server' file within the docker container. Adjust the config file according what options you would like. The chrome-server profile leverages websockets for communications with its agents. Both cert.pem and key.pem are required for SSL. If these files are not preset, the server will generate self-signed certificates. The chrome-extension payload, may or may not work with self-signed certificates. ",
      "deleted": false,
      "creation_time": "03\/10\/2020 13:31:05",
      "last_heartbeat": "03\/10\/2020 15:44:17",
      "name": "chrome-server",
      "icon": null,
      "params": [
        {
          "name": "Port",
          "key": "PORT_REPLACE",
          "hint": "8080",
          "randomize": false,
          "format_string": ""
        },
        {
          "name": "Interval",
          "key": "INTERVAL_REPLACE",
          "hint": "5",
          "randomize": false,
          "format_string": ""
        },
        {
          "name": "Host",
          "key": "HOST_REPLACE",
          "hint": "192.168.1.1",
          "randomize": false,
          "format_string": ""
        },
        {
          "name": "Use SSL (true|false)",
          "key": "SSL_REPLACE",
          "hint": "false",
          "randomize": false,
          "format_string": ""
        }
      ],
      "payload_types": [
        {
          "name": "chrome-extension",
          "files": [
            {
              "chrome-server.js": ""
            }
          ]
        }
      ]
    }
  ]
}
