#!/usr/bin/env python3

from sanic import Sanic
from sanic.response import html, redirect, text, raw
from sanic.exceptions import NotFound
import sys
import asyncio
import ssl
from pathlib import Path
import requests
import json

config = {}


async def no_match(request, exception):
    global config
    if config[request.app.name]['debug']:
        await print_flush("hit a 'no_match' case")
    if config[request.app.name]['no_match']['action'] == "":
        return html("Error: Requested URL {} not found".format(request.url), status=404, headers=config[request.app.name]['headers'])
    elif config[request.app.name]['no_match']['action'] == 'redirect':
        return redirect(config[request.app.name]['no_match']['redirect'])
    elif config[request.app.name]['no_match']['action'] == 'proxy_get':
        resp = requests.get(config[request.app.name]['no_match']['proxy_get']['url'], verify=False)
        return html(resp.content, status=config[request.app.name]['no_match']['proxy_get']['status'], headers=resp.headers)
    elif config[request.app.name]['no_match']['action'] == 'proxy_post':
        resp = requests.post(config[request.app.name]['no_match']['proxy_post']['url'], data=request.body, verify=False)
        return html(resp.content, status=config[request.app.name]['no_match']['proxy_post']['status'], headers=resp.headers)
    elif config[request.app.name]['no_match']['action'] == 'return_file':
        content = open(config[request.app.name]['no_match']['return_file']['name'], 'r').read()
        return text(content, status=config[request.app.name]['no_match']['return_file']['status'], headers=config[request.app.name]['headers'])


async def print_flush(message):
    print(message)
    sys.stdout.flush()


async def server_error_handler(request, exception):
    return await no_match(request, NotFound)


async def agent_message(request, **kwargs):
    global config
    try:
        if config[request.app.name]['debug']:
            await print_flush("agent_message request from: {} with {} and {}".format(request.url, request.cookies, request.headers))
            await print_flush(" and URI: {}".format(request.query_string))
        if config[request.app.name]['debug']:
            await print_flush("Forwarding along to: {}".format(config['apfellBase']))
        if request.method == "POST":
            response = requests.post(config['apfellBase'], data=request.body, verify=False)
        else:
            response = requests.get(config['apfellBase'] + "?{}".format(request.query_string), verify=False, data=request.body)
        return raw(response.content, headers=config[request.app.name]['headers'], status=response.status_code)
    except Exception as e:
        if config[request.app.name]['debug']:
            await print_flush("error in agent_message: {}".format(str(e)))
        return await no_match(request, NotFound)


if __name__ == "__main__":
    config_file = open("config.json", 'rb')
    main_config = json.loads(config_file.read().decode('utf-8'))
    print("Opening config and starting instances...")
    sys.stdout.flush()
    # basic mapping of the general endpoints to the real endpoints
    config['apfellBase'] = main_config['apfellBase']
    # now look at the specific instances to start
    for inst in main_config['instances']:
        config[str(inst['port'])] = {'debug': inst['debug'],
                                     'no_match': inst['no_match'],
                                     'headers': inst['ServerHeaders']}
        # now to create an app instance to handle responses
        app = Sanic(str(inst['port']))
        app.config['REQUEST_MAX_SIZE'] = 1000000000
        app.config['REQUEST_TIMEOUT'] = 600
        app.config['RESPONSE_TIMEOUT'] = 600
        app.error_handler.add(Exception, no_match)
        app.add_route(agent_message, "/<uri:path>", methods=['GET','POST'])
        app.error_handler.add(Exception, server_error_handler)
        keyfile = Path(inst['key_path'])
        certfile = Path(inst['cert_path'])
        if keyfile.is_file() and certfile.is_file():
            context = ssl.create_default_context(purpose=ssl.Purpose.CLIENT_AUTH)
            context.load_cert_chain(inst['cert_path'], keyfile=inst['key_path'])
            if inst['debug']:
                server = app.create_server(host="0.0.0.0", port=inst['port'], ssl=context, debug=False, return_asyncio_server=True, access_log=True)
            else:
                server = app.create_server(host="0.0.0.0", port=inst['port'], ssl=context, debug=False, return_asyncio_server=True, access_log=False)
            if inst['debug']:
                print("using SSL for port {}".format(inst['port']))
                sys.stdout.flush()
        else:
            if inst['debug']:
                print("not using SSL for port {}".format(inst['port']))
                sys.stdout.flush()
            if inst['debug']:
                server = app.create_server(host="0.0.0.0", port=inst['port'], debug=False, return_asyncio_server=True, access_log=True)
            else:
                server = app.create_server(host="0.0.0.0", port=inst['port'], debug=False, return_asyncio_server=True, access_log=False)
        task = asyncio.ensure_future(server)

    try:
        loop = asyncio.get_event_loop()
        def callback(fut):
            try:
                fetch_count = fut.result()
            except:
                print("port already in use")
                sys.stdout.flush()
                sys.exit()
        task.add_done_callback(callback)
        loop.run_forever()
    except:
        sys.exit()
        loop.stop()
